<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[linux安装tree命令 - apt-get install tree]]></title>
      <url>%2F20170503-linux%E5%AE%89%E8%A3%85tree%E5%91%BD%E4%BB%A4%20-%20apt-get%20install%20tree%2F</url>
      <content type="text"><![CDATA[目前debian系列的系统都无法使用apt-get install tree来安装tree命令以下是安装步骤123456789#下载（官网为：http://mama.indstate.edu/users/ice/tree/）wget http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz#解压tar -zxvf tree-1.7.0.tgz#进入目录cd tree-1.7.0#安装sudo make install#完毕最简单的使用方法，在目录下输入：tree使用效果123456789101112131415161718192021222324252627282930313233hisen@ubuntu:~/dl$ tree.├── hisen.log├── master└── test_db-master ├── Changelog ├── employees_partitioned_5.1.sql ├── employees_partitioned.sql ├── employees.sql ├── images │ ├── employees.gif │ ├── employees.jpg │ └── employees.png ├── load_departments.dump ├── load_dept_emp.dump ├── load_dept_manager.dump ├── load_employees.dump ├── load_salaries1.dump ├── load_salaries2.dump ├── load_salaries3.dump ├── load_titles.dump ├── objects.sql ├── README.md ├── sakila │ ├── README.md │ ├── sakila-mv-data.sql │ └── sakila-mv-schema.sql ├── show_elapsed.sql ├── sql_test.sh ├── test_employees_md5.sql └── test_employees_sha.sql3 directories, 26 files使用参数12345678910111213141516171819202122tree命令行参数：-a 显示所有文件和目录。-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。-C 在文件和目录清单加上色彩，便于区分各种类型。-d 显示目录名称而非内容。-D 列出文件或目录的更改时间。-f 在每个文件或目录之前，显示完整的相对路径名称。-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot;号。-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。-i 不以阶梯状列出文件或目录名称。-I 不显示符合范本样式的文件或目录名称。-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。-n 不在文件和目录清单加上色彩。-N 直接列出文件和目录名称，包括控制字符。-p 列出权限标示。-P 只显示符合范本样式的文件或目录名称。-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。-s 列出文件或目录大小。-t 用文件和目录的更改时间排序。-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github api - github api中文说明]]></title>
      <url>%2F20170428-github%20api%20-%20github%20api%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E%2F</url>
      <content type="text"><![CDATA[github api的网址1https://api.github.com/这里介绍两个api12#获取个人信息https://api.github.com/users/&#123;user&#125;;key含义valuelogin登录名称hisen-yuanid数字编号16789019avatar_url头像地址https://avatars1.githubusercontent.com/u/16789019?v=3name用户昵称hisenyuanblog博客地址http://hisen.melocation地理位置Chinabio个人说明Java R &amp; Dpublic_repos仓库个数11created_at创建时间2016-01-20 01:57:15Zupdated_at最后更新2017-04-20 14:03:27Z12#获取项目信息https://api.github.com/users/&#123;user&#125;/reposkey含义valueid项目编号88646378name项目名称dubbohtml_url项目地址https://github.com/hisen-yuan/dubbocreated_at创建时间2017-04-18T16:21:57Zupdated_at更新时间2017-04-18T16:23:16Zpushed_at提交时间2017-04-19T02:33:33Zsize项目大小6514language编程语言Javagithub提供的所有api12345678910111213141516171819202122232425262728293031current_user_url: &quot;https://api.github.com/user&quot;,current_user_authorizations_html_url: &quot;https://github.com/settings/connections/applications&#123;/client_id&#125;&quot;,authorizations_url: &quot;https://api.github.com/authorizations&quot;,code_search_url: &quot;https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,commit_search_url: &quot;https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,emails_url: &quot;https://api.github.com/user/emails&quot;,emojis_url: &quot;https://api.github.com/emojis&quot;,events_url: &quot;https://api.github.com/events&quot;,feeds_url: &quot;https://api.github.com/feeds&quot;,followers_url: &quot;https://api.github.com/user/followers&quot;,following_url: &quot;https://api.github.com/user/following&#123;/target&#125;&quot;,gists_url: &quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;,hub_url: &quot;https://api.github.com/hub&quot;,issue_search_url: &quot;https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,issues_url: &quot;https://api.github.com/issues&quot;,keys_url: &quot;https://api.github.com/user/keys&quot;,notifications_url: &quot;https://api.github.com/notifications&quot;,organization_repositories_url: &quot;https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,organization_url: &quot;https://api.github.com/orgs/&#123;org&#125;&quot;,public_gists_url: &quot;https://api.github.com/gists/public&quot;,rate_limit_url: &quot;https://api.github.com/rate_limit&quot;,repository_url: &quot;https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;&quot;,repository_search_url: &quot;https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,current_user_repositories_url: &quot;https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;&quot;,starred_url: &quot;https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,starred_gists_url: &quot;https://api.github.com/gists/starred&quot;,team_url: &quot;https://api.github.com/teams&quot;,user_url: &quot;https://api.github.com/users/&#123;user&#125;&quot;,user_organizations_url: &quot;https://api.github.com/user/orgs&quot;,user_repositories_url: &quot;https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,user_search_url: &quot;https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java获取股票信息 - java获取股票信息接口]]></title>
      <url>%2F20170427-Java%E8%8E%B7%E5%8F%96%E8%82%A1%E7%A5%A8%E4%BF%A1%E6%81%AF%20-%20java%E8%8E%B7%E5%8F%96%E8%82%A1%E7%A5%A8%E4%BF%A1%E6%81%AF%E6%8E%A5%E5%8F%A3%2F</url>
      <content type="text"><![CDATA[用下面的接口获取股票的数据sh:代表上海市场sz:代表深圳市场后面是加上股票代码，这是因为上海和深圳的股票代码有重复的1http://hq.sinajs.cn/list=sh600877返回的信息1var hq_str_sh600877=&quot;中国嘉陵,6.340,6.400,6.360,6.470,6.210,6.340,6.350,15012913,95227966.000,56500,6.340,12100,6.330,16100,6.320,17500,6.310,47400,6.300,13600,6.350,11300,6.360,32400,6.370,39100,6.380,41200,6.390,2017-04-27,15:00:00,00&quot;;有效信息为引号里面的数据下面的数字代表分割数组后所在的下标下面是数据字段对应的含义源代码：GetStockInformation.java表格如下：位置含义测试数据0股票名字中国嘉陵1今日开盘价6.3402昨日收盘价6.4003当前价格6.3604今日最高价6.4705今日最低价6.2106买一报价6.3407卖一报价6.3508成交数量(百股)150129139成交金额(元)95227966.00010买一数量(股)5650011买一报价6.34012买二数量(股)1210013买二报价6.33014买三数量(股)1610015买三报价6.32016买四数量(股)1750017买四报价6.31018买五数量(股)4740019买五报价6.30020卖一数量(股)1360021卖一报价6.35022卖二数量(股)1130023卖二报价6.36024卖三数量(股)3240025卖三报价6.37026卖四数量(股)3910027卖四报价6.38028卖五数量(股)4120029卖五报价6.39030当前日期2017-04-2731当前时间15:00:0032未知00]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL decode - MySQL中类似oracle的decode实现方法]]></title>
      <url>%2F20170427-MySQL%20decode%20-%20MySQL%E4%B8%AD%E7%B1%BB%E4%BC%BCoracle%E7%9A%84decode%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[在oracle中直接有decode函数 decode(cola,null,0)表示如果cola为空，赋值为0在mysql中的具体实现如下，123456789101112131415161718192021222324252627282930313233343536373839404142434445464748mysql&gt; describe book;+---------+--------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+---------+--------------+------+-----+---------+----------------+| book_id | bigint(20) | NO | PRI | NULL | auto_increment || name | varchar(100) | NO | | NULL | || number | int(11) | NO | | NULL | |+---------+--------------+------+-----+---------+----------------+3 rows in set (0.00 sec)mysql&gt; select * from book;+---------+-------------------------+--------+| book_id | name | number |+---------+-------------------------+--------+| 123 | 123 | 122 || 1000 | Java程序设计 | 5 || 1001 | 数据结构 | 9 || 1002 | 设计模式 | 10 || 1003 | 编译原理 | 10 || 1004 | MySQL从删库到跑路 | 100 || 1005 | 活着 | 10 || 1232 | 11111 | 124 || 2001 | 测试 | 2001 || 10064 | 老鼠爱大米 | 10088 || 10066 | 老鼠爱大米 | 1008 || 10088 | 测试宝典 | 1008 || 10096 | maven实战 | 10096 || 11111 | 111111 | 11111 || 12311 | 都懂得 | 1222 || 123222 | 222 | 1111 |+---------+-------------------------+--------+16 rows in set (0.00 sec)mysql&gt; select if(count(b.book_id)=16,&quot;十六&quot;,&quot;不是十六&quot;) &apos;结果&apos; from book b;+--------+| 结果 |+--------+| 十六 |+--------+1 row in set (0.00 sec)mysql&gt; select case count(b.book_id) when 16 then &apos;十六&apos; else &apos;其他&apos; end as &apos;结果&apos; from book b;+--------+| 结果 |+--------+| 十六 |+--------+1 row in set (0.00 sec)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java原生类库java.util.zip - 文件夹压缩与解压]]></title>
      <url>%2F20170426-Java%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%BA%93java.util.zip%20-%20%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B%2F</url>
      <content type="text"><![CDATA[到处搜了一下也没有看到专门做好的jar包真实的目录结构如下：1234567C:\1\hisenyuan\build.pngC:\1\hisenyuan\DSCN6812.JPGC:\1\hisenyuan\test\test\hello.zipC:\1\hisenyuan\test\hisenyuan.zipC:\1\hisenyuan\test\test.txtC:\1\hisenyuan\test\test\hello\hello.txtC:\1\hisenyuan\tomcat.png压缩包的目录结构如下：1234567build.pngDSCN6812.JPGtest\hello.ziptest\hisenyuan.ziptest\test.txttest\hello\hello.txttomcat.png全部代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168package com.hisen.utils;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;import org.apache.commons.io.IOUtils;import org.junit.Test;/** * 文件夹压缩解压工具 * Created by hisenyuan on 2017/4/20 at 17:27. */public class ZipOrUnZipFileUtil &#123; private InputStream is; private ZipOutputStream zos; private int lastIndexOf; @Test public void testZipOrUnZipFile() &#123; //分隔符，windows linux下有所不同 String separator = File.separator; //想要压缩的文件所在目录 C:\1\hisenyuan String folderPath = &quot;c:&quot; + separator + &quot;1&quot; + separator + &quot;hisenyuan&quot;; //压缩文件路径：C:\1\hisenyuan\hisenyuan.zip String zipFilePath = &quot;c:&quot; + separator + &quot;1&quot; + separator + &quot;hisenyuan&quot; + &quot;.zip&quot;; //解压文件所在的目录 E:\file\hisenyuan String newPath = &quot;e:&quot; + separator + &quot;file&quot; + separator + &quot;hisenyuan&quot;; unZipFile(zipFilePath, newPath); zipFile(folderPath); &#125; /** * 压缩文件 * * @param filePath 压缩文件夹的路径 */ private void zipFile(String filePath) &#123; File file = new File(filePath); File zipFile = new File(filePath + &quot;.zip&quot;); lastIndexOf = file.getAbsolutePath().length() + 1; try &#123; zos = new ZipOutputStream(new FileOutputStream(zipFile)); zos.setComment(&quot;log&quot;); long start = System.currentTimeMillis(); listAllFile(filePath); long stop = System.currentTimeMillis(); System.out.println(&quot;zip done，time：&quot; + (stop - start) / 1000 + &quot;s&quot;); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; finally &#123; IOUtils.closeQuietly(zos, is); &#125; &#125; /** * 循环遍历当前文件夹下的所有文件，使用递归 */ private void listAllFile(String filePath) &#123; File file = new File(filePath); if (file.exists()) &#123; File[] files = file.listFiles(); if (files == null) &#123; System.out.println(&quot;folder is null&quot;); &#125; else &#123; for (File file2 : files) &#123; if (file2.isDirectory()) &#123; listAllFile(file2.getAbsolutePath()); &#125; else &#123; String file3 = file2.getAbsolutePath(); try &#123; is = new FileInputStream(file3); //在zip压缩包当中出现的文件名 String name = file3.substring(lastIndexOf, file3.length()); System.out.println(&quot;name:&quot; + name); zos.putNextEntry(new ZipEntry(name)); int temp; int bufferSize = 1024 * 5; byte[] buffer = new byte[bufferSize]; while ((temp = is.read(buffer, 0, bufferSize)) != -1) &#123; zos.write(buffer, 0, temp); zos.flush(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125; &#125; /** * 解压文件 * * @param filePath 压缩文件所在目录 * @param newPath 想解压到那个目录 */ private void unZipFile(String filePath, String newPath) &#123; //压缩文件所在的父目录 String oldPath = new File(filePath).getParentFile().toString(); File outFile; ZipInputStream zipInputStream = null; OutputStream outputStream = null; InputStream inputStream = null; ZipEntry zipEntry; try &#123; ZipFile zipFile = new ZipFile(filePath); zipInputStream = new ZipInputStream(new FileInputStream(filePath)); while (null != (zipEntry = zipInputStream.getNextEntry())) &#123; System.out.println(&quot;解压缩&quot; + zipEntry.getName() + &quot;文件。&quot;); //newPath为空就代表解压在当前目录 if (&quot;&quot;.equals(newPath) || newPath.isEmpty()) &#123; outFile = new File(oldPath + zipEntry.getName()); &#125; else &#123; //防止传入的目录不存在 File file = new File(newPath); if (!file.exists()) &#123; file.mkdir(); &#125; outFile = new File(newPath + File.separator + zipEntry.getName()); &#125; //判断当前文件路径是否存在，不存在就创建 buildFile(outFile); inputStream = zipFile.getInputStream(zipEntry); outputStream = new FileOutputStream(outFile); int temp; int bufferSize = 1024 * 5; byte[] buffer = new byte[bufferSize]; while ((temp = inputStream.read(buffer, 0, bufferSize)) != -1) &#123; outputStream.write(buffer, 0, temp); &#125; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; IOUtils.closeQuietly(inputStream, outputStream, zipInputStream); &#125; &#125; /** * 判断文件是否存在，不存在创建 */ private static void buildFile(File file) &#123; if (!file.exists()) &#123; File parent = file.getParentFile(); if (parent != null &amp;&amp; !parent.exists()) &#123; parent.mkdirs(); &#125; try &#123; file.createNewFile(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[zookeeper & dubbo搭建 - 在IDEA上运行阿里巴巴Dubbo-demo]]></title>
      <url>%2F20170419-zookeeper%20%26%20dubbo%E6%90%AD%E5%BB%BA%20-%20%E5%9C%A8IDEA%E4%B8%8A%E8%BF%90%E8%A1%8C%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Dubbo-demo%2F</url>
      <content type="text"><![CDATA[IDEA上搭建dubbo服务的简单过程只是简单的让例子在IntelliJ IDEA跑起来目前是最新的版本：2.5.4-SNAPSHOT本文档更新时间：2017年04月19日01:08:02一 、安装zookeeper参考链接：ubuntu apt-get安装zookeeper二、Idea clone本项目导出项目之后，配置一下tomcat，添加dubbo-admin：war到tomcat中项目github地址：https://github.com/hisen-yuan/dubbo三、启动tomcat，即可访问dubbo管理后台默认账号：root默认密码：root四、启动服务提供者&amp;消费者demo修改dubbo-demo-consumer配置文件中的注册中心地址1/dubbo/dubbo-demo/dubbo-demo-consumer/src/test/resources/dubbo.properties123#dubbo.registry.address=multicast://224.5.6.7:1234#使用本地的zookeeper做注册中心dubbo.registry.address=zookeeper://127.0.0.1:2181修改ubbo-demo-provider配置文件中的注册中心地址1/dubbo/dubbo-demo/dubbo-demo-provider/src/test/resources/dubbo.properties123#dubbo.registry.address=multicast://224.5.6.7:1234#使用本地的zookeeper做注册中心dubbo.registry.address=zookeeper://127.0.0.1:2181分别启动dubbo-demo下ubbo-demo-provider、dubbo-demo-consumer下的测试方法即可在后台看到有服务在运行]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL一个group by查询出最大值和非group by所在字段的值]]></title>
      <url>%2F20170418-MySQL%E4%B8%80%E4%B8%AAgroup%20by%E6%9F%A5%E8%AF%A2%E5%87%BA%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E9%9D%9Egroup%20by%E6%89%80%E5%9C%A8%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC%2F</url>
      <content type="text"><![CDATA[表结构，数据内容如下。需求是：查找出每个年级，年纪最大的人的名字。个人的思维只停留在1234567891011mysql&gt; select name, max(age),grade from stu group by grade;ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &apos;hisen.stu.name&apos; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_bymysql&gt; SELECT A.* FROM stu A INNER JOIN (SELECT MAX(AGE) AS MAX_AGE,GRADE FROM stu GROUP BY GRADE ) B ON A.GRADE = B.GRADE AND A.AGE= B.MAX_AGE;+----+------+------+-------+| id | name | age | grade |+----+------+------+-------+| 3 | c | 13 | 1 || 6 | f | 13 | 2 |+----+------+------+-------+2 rows in set (0.00 sec)折腾了一会自己不知道怎么解决，后来倒是解决了。具体过程如下：1234567891011121314151617181920212223242526272829303132mysql&gt; describe stu;+-------+---------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+----------------+| id | int(11) | NO | PRI | NULL | auto_increment || name | char(1) | YES | | NULL | || age | int(11) | YES | | NULL | || grade | int(11) | YES | | NULL | |+-------+---------+------+-----+---------+----------------+4 rows in set (0.00 sec)mysql&gt; select * from stu;+----+------+------+-------+| id | name | age | grade |+----+------+------+-------+| 1 | a | 11 | 1 || 2 | b | 12 | 1 || 3 | c | 13 | 1 || 4 | d | 11 | 2 || 5 | e | 12 | 2 || 6 | f | 13 | 2 |+----+------+------+-------+6 rows in set (0.00 sec)mysql&gt; select max(name), max(age),grade from stu group by grade;+-----------+----------+-------+| max(name) | max(age) | grade |+-----------+----------+-------+| c | 13 | 1 || f | 13 | 2 |+-----------+----------+-------+2 rows in set (0.01 sec)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Docker一键安装脚本Ubuntu-Debian-CentOS-Fedora-racleLinux]]></title>
      <url>%2F20170417-Docker%E4%B8%80%E4%BB%B6%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%ACUbuntu-Debian-CentOS-Fedora-racleLinux%2F</url>
      <content type="text"><![CDATA[系统要求Ubuntu 14.04、16.04Debian 7.7、8.0CentOS 7.XFedora 20、21、22OracleLinux 6、7安装方法：1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -详情：http://mirrors.aliyun.com/help/docker-engine]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用docker搭建IntelliJ IDEA License Server - idea本地激活服务器]]></title>
      <url>%2F20170417-%E7%94%A8docker%E6%90%AD%E5%BB%BAIntelliJ%20IDEA%20License%20Server%20-%20idea%E6%9C%AC%E5%9C%B0%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
      <content type="text"><![CDATA[如果您还没有安装docker，请右上角搜索：ubuntu安装docker-ce本次使用的docker镜像很小，只有5M安装完docker之后123456789hisen@ubuntu:/$ docker pull woailuoli993/jblse:0.2.00.2.0: Pulling from woailuoli993/jblse0a8490d0dfd3: Pull complete 3e84c1b15299: Pull complete 29bb05563e29: Pull complete Digest: sha256:2b2abbd66913072d41ba945c0fddb865d504267a743bed587e9cf5d18ef95da0Status: Downloaded newer image for woailuoli993/jblse:0.2.0hisen@ubuntu:/$ docker run -d --name=&quot;jblse&quot; -p 20701:20701 woailuoli993/jblse:0.2.0 -u hisenbb258a5b4407bd78fdcef5280ea53c17fd9f8759f0cc5b5c26a92e1d85176e90说明：-P 后面的20701是自定义端口，可以随便改。-u 后面是用户名，就是idea显示的用户名1http://127.0.0.1:20701然后正确的使用姿势：Help-Register（或者安装的时候选择）或者：1chmod u+x /home/soft/IntelliJIDEALicenseServer_linux_amd641sudo vi /etc/rc.local在exit 0的上面新起一行，写入1./home/soft/IntelliJIDEALicenseServer_linux_amd64 -p 2008 -u hisen即可开机启动这个服务端激活脚本服务器地址：1http://217.0.0.1:2008]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu安装docker-ce并配置国内源和加速器]]></title>
      <url>%2F20170417-ubuntu%E5%AE%89%E8%A3%85docker-ce%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90%E5%92%8C%E5%8A%A0%E9%80%9F%E5%99%A8%2F</url>
      <content type="text"><![CDATA[一、配置ubuntu国内镜像，这里推荐阿里云，右上角搜索：换阿里云源二、安装docker1234sudo apt-get updatesudo apt-get install \ linux-image-extra-$(uname -r) \ linux-image-extra-virtual安装docker包12345sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common添加docker官方GPG秘钥,留意最后那个符号也要复制1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -安装稳定版仓库1234sudo add-apt-repository \ &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable&quot;再次更新源1sudo apt-get update安装docker-ce1sudo apt-get install docker-ce三、给docker添加国内加速器在阿里云申请一个账号，打开连接https://cr.console.aliyun.com/#/accelerator拷贝您的专属加速器地址（每个人专属的，登陆需要密码），然后1vi /etc/systemd/system/multi-user.target.wants/docker.service可以看到如下内容12345678910[Service]Type=notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by docker#下面这行是默认的，我注释了，添加了下面一行#ExecStart=/usr/bin/dockerd -H fd://ExecStart=/usr/bin/dockerd -H fd:// --registry-mirror=https://9s3ekxxx.mirror.aliyuncs.comExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=1048576找到 ExecStart= 这一行，在这行最后添加加速器地址 –registry-mirror=&lt;加速器地址&gt;如：ExecStart=/usr/bin/dockerd -H fd:// –registry-mirror=https://xxxxxx.mirror.aliyuncs.com四、重新加载配置并且重新启动12$ sudo systemctl daemon-reload$ sudo systemctl restart docker至此docker安装及国内加速器都好了，开始你的docker之旅吧。1sudo docker run hello-world看到如下信息1234567891011121314151617181920212223242526hisen@ubuntu:/$ sudo docker run hello-worldUnable to find image &apos;hello-world:latest&apos; locallylatest: Pulling from library/hello-world78445dd45222: Pull complete Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/到此就圆满结束最后给个彩蛋，阿里云一键安装脚本，执行下面命令即可安装最新版docker1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -详情：http://mirrors.aliyun.com/help/docker-engine]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[html - 原生javascript动态显示当前时间和日期]]></title>
      <url>%2F20170412-html%20-%20%E5%8E%9F%E7%94%9Fjavascript%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F%2F</url>
      <content type="text"><![CDATA[显示当前时间：2017年04月12日 18:26:37 星期三示例如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;显示当前时间 - 原生javascript&lt;/title&gt;&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt; function show_cur_times()&#123; //获取当前日期 var date_time = new Date(); //定义星期 var week; //switch判断 switch (date_time.getDay())&#123; case 1: week=&quot;星期一&quot;; break; case 2: week=&quot;星期二&quot;; break; case 3: week=&quot;星期三&quot;; break; case 4: week=&quot;星期四&quot;; break; case 5: week=&quot;星期五&quot;; break; case 6: week=&quot;星期六&quot;; break; default:week=&quot;星期天&quot;; break; &#125; //年 var year = date_time.getFullYear(); //判断小于10，前面补0 if(year&lt;10)&#123; year=&quot;0&quot;+year; &#125; //月 var month = date_time.getMonth()+1; //判断小于10，前面补0 if(month&lt;10)&#123; month=&quot;0&quot;+month; &#125; //日 var day = date_time.getDate(); //判断小于10，前面补0 if(day&lt;10)&#123; day=&quot;0&quot;+day; &#125; //时 var hours =date_time.getHours(); //判断小于10，前面补0 if(hours&lt;10)&#123; hours=&quot;0&quot;+hours; &#125; //分 var minutes =date_time.getMinutes(); //判断小于10，前面补0 if(minutes&lt;10)&#123; minutes=&quot;0&quot;+minutes; &#125; //秒 var seconds=date_time.getSeconds(); //判断小于10，前面补0 if(seconds&lt;10)&#123; seconds=&quot;0&quot;+seconds; &#125; //拼接年月日时分秒 var date_str = year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日 &quot;+hours+&quot;:&quot;+minutes+&quot;:&quot;+seconds+&quot; &quot;+week; //显示在id为showtimes的容器里 document.getElementById(&quot;showtimes&quot;).innerHTML= date_str; &#125; //设置1秒调用一次show_cur_times函数 setInterval(&quot;show_cur_times()&quot;,100); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;显示当前时间：&lt;p id=&quot;showtimes&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Maven镜像库设置 - maven mirrors - maven 镜像 阿里]]></title>
      <url>%2F20170412-Maven%E9%95%9C%E5%83%8F%E5%BA%93%E8%AE%BE%E7%BD%AE%20-%20maven%20mirrors%20-%20maven%20%E9%95%9C%E5%83%8F%20%E9%98%BF%E9%87%8C%2F</url>
      <content type="text"><![CDATA[配置文件：1yourPath\maven-3.3.9\conf\settings.xml找到里面的，添加镜像即可12&lt;mirrors&gt;&lt;/mirrors&gt;这里写的是被镜像的ID如果写成：* (星号)所有的请求都会到这个镜像上，包括各种本地库注意：千万不要配成*否则内网的仓库或者你配的镜像里面没有一下jar包的时候不会去别的地方搜索123456789101112131415&lt;!--阿里云：速度挺快--&gt;&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;&lt;!--谷歌：北京速度不错--&gt;&lt;mirror&gt; &lt;id&gt;google-maven-central&lt;/id&gt; &lt;name&gt;Google Maven Central&lt;/name&gt; &lt;url&gt;https://maven-central.storage.googleapis.com&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[oracle分页的三种方式]]></title>
      <url>%2F20170411-oracle%E5%88%86%E9%A1%B5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[第一种：12345select * from (select t.*, rownum rn from (select * from EW_AUTH_FLOW) t where rownum &lt;= 5) where rn &gt; 2;第二种：123select * from (select t.*, rownum rn from ew_auth_flow t where rownum &lt;= 5) where rn &gt; 2;第三种：123select * from (select t.*, rownum rn from ew_auth_flow t) where rn between 2 and 5;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jedis - Software caused connection abort:recv failed]]></title>
      <url>%2F20170411-Jedis%20-%20Software%20caused%20connection%20abort%20recv%20failed%2F</url>
      <content type="text"><![CDATA[在使用jedis的时候出现这个问题：redis.clients.jedis.exceptions.JedisConnectionException:java.net.SocketException:Software caused connection abort: recv failed我是windows上java运行，然后redis是在虚拟机的，通过映射访问解决办法：编辑redis配置文件：1sudo vi /etc/redis/redis.conf找到1bind 127.0.0.1改成1bind 0.0.0.0改完之后重启redis1service redis restart即可。这跟mysql一样，允许任何ip连接！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mysql Employees Database练习题&答案]]></title>
      <url>%2F20170410-Mysql%20Employees%20%20Database%E7%BB%83%E4%B9%A0%E9%A2%98%26%E7%AD%94%E6%A1%88%2F</url>
      <content type="text"><![CDATA[Employees数据库是mysql官方提供的一个测试用数据库里面含有几十万条数据。找了好久也没有找到比较匹配的题目就找了个匹配度比较高的题来练习，如果你还没有导入Employees Sample Database请参考：点击导入Employees本次操作在Xshell中完成，也就是mysql命令行。简单的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#登陆数据库hisen@ubuntu:/$ mysql -u root -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 8Server version: 5.7.17-0ubuntu0.16.04.2 (Ubuntu)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || employees || log4j || mysql || performance_schema || ssm || sys |+--------------------+7 rows in set (0.00 sec)mysql&gt; use employeesReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+----------------------+| Tables_in_employees |+----------------------+| current_dept_emp || departments || dept_emp || dept_emp_latest_date || dept_manager || employees || salaries || titles |+----------------------+8 rows in set (0.00 sec)mysql&gt; select * from employees limit 10;+--------+------------+------------+-----------+--------+------------+| emp_no | birth_date | first_name | last_name | gender | hire_date |+--------+------------+------------+-----------+--------+------------+| 10001 | 1953-09-02 | Georgi | Facello | M | 1986-06-26 || 10002 | 1964-06-02 | Bezalel | Simmel | F | 1985-11-21 || 10003 | 1959-12-03 | Parto | Bamford | M | 1986-08-28 || 10004 | 1954-05-01 | Chirstian | Koblick | M | 1986-12-01 || 10005 | 1955-01-21 | Kyoichi | Maliniak | M | 1989-09-12 || 10006 | 1953-04-20 | Anneke | Preusig | F | 1989-06-02 || 10007 | 1957-05-23 | Tzvetan | Zielinski | F | 1989-02-10 || 10008 | 1958-02-19 | Saniya | Kalloufi | M | 1994-09-15 || 10009 | 1952-04-19 | Sumant | Peac | F | 1985-02-18 || 10010 | 1963-06-01 | Duangkaew | Piveteau | F | 1989-08-24 |+--------+------------+------------+-----------+--------+------------+10 rows in set (0.00 sec)#统计各部门曾经拥有的员工数量mysql&gt; select dept_no,count(*) emp_sum -&gt; from dept_emp -&gt; group by dept_no -&gt; order by emp_sum desc;+---------+---------+| dept_no | emp_sum |+---------+---------+| d005 | 85707 || d004 | 73485 || d007 | 52245 || d009 | 23580 || d008 | 21126 || d001 | 20211 || d006 | 20117 || d003 | 17786 || d002 | 17346 |+---------+---------+9 rows in set (0.63 sec)#创建视图mysql&gt; CREATE VIEW test AS -&gt; SELECT dept_no, COUNT(*) AS emp_sum -&gt; FROM dept_emp -&gt; GROUP BY dept_no -&gt; ORDER BY emp_sum DESC -&gt; ;Query OK, 0 rows affected (0.16 sec)mysql&gt; select * from test;+---------+---------+| dept_no | emp_sum |+---------+---------+| d005 | 85707 || d004 | 73485 || d007 | 52245 || d009 | 23580 || d008 | 21126 || d001 | 20211 || d006 | 20117 || d003 | 17786 || d002 | 17346 |+---------+---------+9 rows in set (0.11 sec)#联合查询，加上部门名称mysql&gt; select test.dept_no,emp_sum,dept_name -&gt; from test,departments -&gt; where test.dept_no = departments.dept_no;+---------+---------+--------------------+| dept_no | emp_sum | dept_name |+---------+---------+--------------------+| d009 | 23580 | Customer Service || d005 | 85707 | Development || d002 | 17346 | Finance || d003 | 17786 | Human Resources || d001 | 20211 | Marketing || d004 | 73485 | Production || d006 | 20117 | Quality Management || d008 | 21126 | Research || d007 | 52245 | Sales |+---------+---------+--------------------+9 rows in set (0.16 sec)练习题目和答案：建议看看输出的结果自己写下sql，不要单纯的复制粘贴。因为数据量比较大， 很多时候我都加了5条数据的限制。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346#1.查找整个职员表的所有内容。mysql&gt; select * from employees limit 5;+--------+------------+------------+-----------+--------+------------+| emp_no | birth_date | first_name | last_name | gender | hire_date |+--------+------------+------------+-----------+--------+------------+| 10001 | 1953-09-02 | Georgi | Facello | M | 1986-06-26 || 10002 | 1964-06-02 | Bezalel | Simmel | F | 1985-11-21 || 10003 | 1959-12-03 | Parto | Bamford | M | 1986-08-28 || 10004 | 1954-05-01 | Chirstian | Koblick | M | 1986-12-01 || 10005 | 1955-01-21 | Kyoichi | Maliniak | M | 1989-09-12 |+--------+------------+------------+-----------+--------+------------+5 rows in set (0.00 sec)#2.查看雇员名字(last_name)。mysql&gt; select last_name from employees limit 5;+-----------+| last_name |+-----------+| Facello || Simmel || Bamford || Koblick || Maliniak |+-----------+5 rows in set (0.00 sec)#3.查看雇员编号、名字和部门mysql&gt; select e.last_name,e.emp_no,d.dept_name from employees e,departments d,dept_emp de where e.emp_no = de.emp_no and de.dept_no = d.dept_no limit 5;+-------------+--------+------------------+| last_name | emp_no | dept_name |+-------------+--------+------------------+| Sluis | 10011 | Customer Service || Lortz | 10038 | Customer Service || Tramer | 10049 | Customer Service || Billingsley | 10060 | Customer Service || Syrzycki | 10088 | Customer Service |+-------------+--------+------------------+5 rows in set (0.00 sec)#4.显示所有雇员的工号、姓名、工资mysql&gt; select e.emp_no,concat(e.last_name,&apos; &apos;,e.first_name) name,s.salary from employees e,salaries s where e.emp_no=s.emp_no limit 5;+--------+----------------+--------+| emp_no | name | salary |+--------+----------------+--------+| 10001 | Facello Georgi | 60117 || 10001 | Facello Georgi | 62102 || 10001 | Facello Georgi | 66074 || 10001 | Facello Georgi | 66596 || 10001 | Facello Georgi | 66961 |+--------+----------------+--------+5 rows in set (0.00 sec)#5.查找在d005号部门工作的雇员mysql&gt; select e.emp_no,concat(e.last_name,&apos; &apos;,e.first_name) name,d.dept_no,d.dept_name from employees e,dept_emp de,departments d where e.emp_no = de.emp_no and de.dept_no = d.dept_no and d.dept_no = &apos;d005&apos; limit 5;+--------+--------------------+---------+-------------+| emp_no | name | dept_no | dept_name |+--------+--------------------+---------+-------------+| 10001 | Facello Georgi | d005 | Development || 10006 | Preusig Anneke | d005 | Development || 10008 | Kalloufi Saniya | d005 | Development || 10012 | Bridgland Patricio | d005 | Development || 10014 | Genin Berni | d005 | Development |+--------+--------------------+---------+-------------+5 rows in set (0.05 sec)#6.要求查找职位为Engineer和Senior Engineer的雇员姓名(last_name)mysql&gt; select e.last_name from employees e,titles t where t.emp_no=e.emp_no and t.title in(&apos;Engineer&apos;,&apos;Senior Engineer&apos;) limit 5;+-----------+| last_name |+-----------+| Facello || Bamford || Koblick || Koblick || Preusig |+-----------+5 rows in set (0.00 sec)#7.查找职位不是Engineer和Senior Engineer的部门编号，雇员部门及姓名。将姓名显示为(first_name+last_name命名为”Name”)mysql&gt; select d.dept_no,d.dept_name,concat(e.first_name,&apos; &apos;,e.last_name) name from employees e,titles t,dept_emp de,departmentss d where e.emp_no=de.emp_no and de.dept_no = d.dept_no and t.emp_no = e.emp_no and t.title not in(&apos;Engineer&apos;,&apos;Senior Engineer&apos;&apos;) limit 5;+---------+------------------+--------------+| dept_no | dept_name | name |+---------+------------------+--------------+| d009 | Customer Service | Mary Sluis || d009 | Customer Service | Huan Lortz || d009 | Customer Service | Huan Lortz || d009 | Customer Service | Basil Tramer || d009 | Customer Service | Basil Tramer |+---------+------------------+--------------+5 rows in set (0.00 sec)#8.查找哪些雇员的工资在60000到90000之间mysql&gt; select concat(e.first_name,&apos; &apos;,e.last_name) name,s.salary from employees e,salaries s where s.salary between 60000 and 90000 and e.emp_no = s.emp_no limit 5;+----------------+--------+| name | salary |+----------------+--------+| Georgi Facello | 60117 || Georgi Facello | 62102 || Georgi Facello | 66074 || Georgi Facello | 66596 || Georgi Facello | 66961 |+----------------+--------+5 rows in set (0.00 sec)#9.查找哪些雇员的工资不在60000到90000之间mysql&gt; select concat(e.first_name,&apos; &apos;,e.last_name) name,s.salary from employees e,salaries s where s.salary not between 60000 and 90000 and e.emp_no = s.emp_no limit 10;+-------------------+--------+| name | salary |+-------------------+--------+| Parto Bamford | 40006 || Parto Bamford | 43616 || Parto Bamford | 43466 || Parto Bamford | 43636 || Parto Bamford | 43478 || Parto Bamford | 43699 || Parto Bamford | 43311 || Chirstian Koblick | 40054 || Chirstian Koblick | 42283 || Chirstian Koblick | 42542 |+-------------------+--------+10 rows in set (0.00 sec)#10.查找first_name以P开头，后面仅有四个字母的雇员信息mysql&gt; select e.emp_no,concat(e.first_name,&apos; &apos;,e.last_name) name from employees e where e.first_name like &apos;P____&apos; and e.first_name not like &apos;p__&apos; limit 5;+--------+---------------------+| emp_no | name |+--------+---------------------+| 10003 | Parto Bamford || 10101 | Perla Heyers || 10138 | Perry Shimshoni || 10353 | Phule Hammerschmidt || 10387 | Parto Wrigley |+--------+---------------------+5 rows in set (0.00 sec)#11.查找last_name以K开头的雇员信息mysql&gt; select e.emp_no,concat(e.first_name,&apos; &apos;,e.last_name) name from employees e where e.first_name like &apos;K%&apos; limit 5; +--------+----------------------+| emp_no | name |+--------+----------------------+| 10005 | Kyoichi Maliniak || 10016 | Kazuhito Cappelletti || 10018 | Kazuhide Peha || 10031 | Karsten Joslin || 10066 | Kwee Schusler |+--------+----------------------+5 rows in set (0.00 sec)#12.查找名字以字母K开头，以i结尾，并且第三个字母为o的雇员名字(First_name)、职位和所在部门号mysql&gt; select concat(e.first_name,&apos; &apos;,e.last_name) name,t.title,de.dept_no from employees e,dept_emp de,titles t where e.first_name like &apos;K_o%i&apos; and e.emp_no = t.emp_no and e.emp_no = de.emp_no limit 5;+------------------+--------------+---------+| name | title | dept_no |+------------------+--------------+---------+| Kyoichi Maliniak | Senior Staff | d003 || Kyoichi Maliniak | Staff | d003 || Kyoichi Wossner | Staff | d007 || Kyoichi Flexer | Senior Staff | d007 || Kyoichi Flexer | Staff | d007 |+------------------+--------------+---------+5 rows in set (0.00 sec)#13.查找哪些雇员的职位名不以Se开头mysql&gt; select concat(e.first_name,&apos; &apos;,last_name) name,t.title from employees e,titles t where e.emp_no = t.emp_no and t.title not like &apos;Se%&apos; limit 5;+-------------------+--------------------+| name | title |+-------------------+--------------------+| Bezalel Simmel | Staff || Chirstian Koblick | Engineer || Kyoichi Maliniak | Staff || Tzvetan Zielinski | Staff || Saniya Kalloufi | Assistant Engineer |+-------------------+--------------------+5 rows in set (0.00 sec)#14.查找d005号部门里不是Staff的雇员信息mysql&gt; select concat(e.first_name,&apos; &apos;,last_name) name,t.title from employees e,dept_emp de,titles t where e.emp_no = de.emp_no and e.emp_no = t.emp_no and t.title != &apos;Staff&apos; limit 5;+-------------------+-----------------+| name | title |+-------------------+-----------------+| Georgi Facello | Senior Engineer || Parto Bamford | Senior Engineer || Chirstian Koblick | Engineer || Chirstian Koblick | Senior Engineer || Kyoichi Maliniak | Senior Staff |+-------------------+-----------------+5 rows in set (0.00 sec)#15.查找d005号部门工资大于100000的员工的信息mysql&gt; select concat(e.first_name,&apos; &apos;,last_name) name,t.title,s.salary from employees e,dept_emp de,titles t,salaries s where e.emp_no = de.emp_no and e.emp_no = t.emp_no and e.emp_no = s.emp_no and de.dept_no = &apos;d005&apos; and s.salary &gt; 100000 limit 5;+---------------+--------------------+--------+| name | title | salary |+---------------+--------------------+--------+| Kwee Schusler | Assistant Engineer | 102425 || Kwee Schusler | Assistant Engineer | 102674 || Kwee Schusler | Assistant Engineer | 103672 || Kwee Schusler | Engineer | 102425 || Kwee Schusler | Engineer | 102674 |+---------------+--------------------+--------+5 rows in set (0.00 sec)#16.按字母顺序显示雇员的名字(last_name)mysql&gt; select concat(e.first_name,&apos; &apos;,last_name) name from employees e order by e.last_name limit 5;+------------------+| name |+------------------+| Aluzio Aamodt || Sachem Aamodt || Sreenivas Aamodt || Mokhtar Aamodt || Bartek Aamodt |+------------------+5 rows in set (0.24 sec)#17.按部门编号降序显示雇员信息mysql&gt; select concat(e.first_name,&apos; &apos;,last_name) name,de.dept_no from employees e,dept_emp de where e.emp_no = de.emp_no order by de.dept_no desc limit 5;+-------------------+---------+| name | dept_no |+-------------------+---------+| Pohua Sichman | d009 || Uri Juneja | d009 || Mohammed Pleszkun | d009 || Chiranjit Kuzuoka | d009 || Ronghao Morrow | d009 |+-------------------+---------+5 rows in set (0.00 sec)#18.计算每个部门的平均工资和工资总和mysql&gt; select de.dept_no,sum(s.salary),avg(s.salary) from employees e,dept_emp de,salaries s where e.emp_no = de.emp_no and e.emp_no = s.emp_no group by de.dept_no;+---------+---------------+---------------+| dept_no | sum(s.salary) | avg(s.salary) |+---------+---------------+---------------+| d001 | 13725425266 | 71913.2000 || d002 | 11650834677 | 70489.3649 || d003 | 9363811425 | 55574.8794 || d004 | 41554438942 | 59605.4825 || d005 | 48179456393 | 59478.9012 || d006 | 10865203635 | 57251.2719 || d007 | 40030089342 | 80667.6058 || d008 | 11969730427 | 59665.1817 || d009 | 13143639841 | 58770.3665 |+---------+---------------+---------------+9 rows in set (7.14 sec)#19.查询每个部门的每个职位的雇员数mysql&gt; select de.dept_no,t.title,sum(e.emp_no) from employees e,dept_emp de,titles t where e.emp_no = de.emp_no and e.emp_no = t.emp_no group by de.dept_no,t.title limit 5;+---------+--------------+---------------+| dept_no | title | sum(e.emp_no) |+---------+--------------+---------------+| d001 | Manager | 220061 || d001 | Senior Staff | 3561178455 || d001 | Staff | 4142508539 || d002 | Manager | 220199 || d002 | Senior Staff | 3090249864 |+---------+--------------+---------------+5 rows in set (3.13 sec)#20.请算出employees表中所有雇员的平均工资mysql&gt; select avg(s.salary) from employees e,salaries s where e.emp_no = s.emp_no;+---------------+| avg(s.salary) |+---------------+| 63810.7448 |+---------------+1 row in set (4.48 sec)#21.请查询出employees表中的最低工资的员工信息mysql&gt; select concat(first_name,&apos; &apos;,last_name) name from employees e,salaries s where e.emp_no = s.emp_no and s.salary = (selecct min(s.salary) salary from salaries s);+--------------+| name |+--------------+| Olivera Baek |+--------------+1 row in set (1.99 sec)#22.请计算出每个部门的平均工资、最高工资和最低工资mysql&gt; select de.dept_no,avg(s.salary),max(s.salary),min(s.salary) from employees e,dept_emp de,salaries s where e.emp_no = de.emp_no and e.emp_no = s.emp_no group by de.dept_no;+---------+---------------+---------------+---------------+| dept_no | avg(s.salary) | max(s.salary) | min(s.salary) |+---------+---------------+---------------+---------------+| d001 | 71913.2000 | 145128 | 39127 || d002 | 70489.3649 | 142395 | 38812 || d003 | 55574.8794 | 141953 | 38735 || d004 | 59605.4825 | 138273 | 38623 || d005 | 59478.9012 | 144434 | 38849 || d006 | 57251.2719 | 132103 | 38786 || d007 | 80667.6058 | 158220 | 39169 || d008 | 59665.1817 | 130211 | 38851 || d009 | 58770.3665 | 144866 | 38836 |+---------+---------------+---------------+---------------+9 rows in set (7.06 sec)#23.查询薪水发放时间在1986-06-26 ~ 1987-06-25薪水高于46145号雇员并且工种与他相同的雇员情况。select e.* from employees e,titles t,salaries s where e.emp_no = t.emp_no and e.emp_no = t.emp_no and t.title = (select title from titles where emp_no = 46135) and s.salary &gt; (select s.salary from salaries s where s.from_date &gt; str_to_date(&apos;1986-06-26&apos;,&apos;%Y-%m-%d&apos;) and s.to_date &lt; str_to_date(&apos;1987-06-2 25&apos;,&apos;%Y-%m-%d&apos;) and s.emp_no = &apos;46135&apos;) and s.from_date &gt; str_to_date(&apos;1986-06-26&apos;,&apos;%Y-%m-%d&apos;) and s.to_date &lt; str_to_date(&apos;1987-06-2 25&apos;,&apos;%Y-%m-%d&apos;) limit 10;+--------+------------+------------+------------+--------+------------+| emp_no | birth_date | first_name | last_name | gender | hire_date |+--------+------------+------------+------------+--------+------------+| 10004 | 1954-05-01 | Chirstian | Koblick | M | 1986-12-01 || 10009 | 1952-04-19 | Sumant | Peac | F | 1985-02-18 || 10010 | 1963-06-01 | Duangkaew | Piveteau | F | 1989-08-24 || 10012 | 1960-10-04 | Patricio | Bridgland | M | 1992-12-18 || 10014 | 1956-02-12 | Berni | Genin | M | 1987-03-11 || 10018 | 1954-06-19 | Kazuhide | Peha | F | 1987-04-03 || 10020 | 1952-12-24 | Mayuko | Warwick | M | 1991-01-26 || 10022 | 1952-07-08 | Shahaf | Famili | M | 1995-08-22 || 10023 | 1953-09-29 | Bojan | Montemayor | F | 1989-12-17 || 10026 | 1953-04-03 | Yongqiao | Berztiss | M | 1995-03-20 |+--------+------------+------------+------------+--------+------------+10 rows in set, 2 warnings (0.05 sec)#24.查询工资在10000到50000之间的雇员所在部门的所有人员的信息。mysql&gt; select e.*,d.dept_no,d.dept_name from employees e,dept_emp de,departments d where e.emp_no = de.emp_no and de.dept_no =d.dept_no and e.emp_no in (select distinct s.emp_no from salaries s where s.salary between 10000 and 50000) limit 10;+--------+------------+-------------+-----------+--------+------------+---------+------------------+| emp_no | birth_date | first_name | last_name | gender | hire_date | dept_no | dept_name |+--------+------------+-------------+-----------+--------+------------+---------+------------------+| 10011 | 1953-11-07 | Mary | Sluis | F | 1990-01-22 | d009 | Customer Service || 10038 | 1960-07-20 | Huan | Lortz | M | 1989-09-20 | d009 | Customer Service || 10049 | 1961-04-24 | Basil | Tramer | F | 1992-05-04 | d009 | Customer Service || 10098 | 1961-09-23 | Sreekrishna | Servieres | F | 1985-05-13 | d009 | Customer Service || 10112 | 1963-08-13 | Yuichiro | Swick | F | 1985-10-08 | d009 | Customer Service || 10115 | 1964-12-25 | Chikara | Rissland | M | 1986-01-23 | d009 | Customer Service || 10126 | 1954-08-07 | Kayoko | Valtorta | M | 1985-09-08 | d009 | Customer Service || 10128 | 1958-02-15 | Babette | Lamba | F | 1988-06-06 | d009 | Customer Service || 10137 | 1959-07-30 | Maren | Hutton | M | 1985-02-18 | d009 | Customer Service || 10154 | 1957-01-17 | Abdulah | Thibadeau | F | 1990-12-12 | d009 | Customer Service |+--------+------------+-------------+-----------+--------+------------+---------+------------------+10 rows in set (1.28 sec)#25.查询出在薪水发放时间在1986-06-26 ~ 1987-06-25的员工信息###（工号，姓名，性别，薪水，职位）mysql&gt; select e.emp_no,concat(e.first_name,&quot; &quot;,e.last_name) name,e.gender,s.salary,t.title from employees e,salaries s,titles t where e.emp_no = s.emp_no and e.emp_no = t.emp_no and s.from_date &gt; str_to_date(&apos;1986-06-26&apos;,&apos;%Y-%m-%d&apos;) and s.to_date &lt; str_to_date(&apos;1987-06-2 25&apos;,&apos;%Y-%m-%d&apos;) limit 10;+--------+-------------------+--------+--------+-----------------+| emp_no | name | gender | salary | title |+--------+-------------------+--------+--------+-----------------+| 13543 | Tua Garigliano | F | 78646 | Staff || 13589 | Arfst Munck | F | 44306 | Staff || 14085 | Jiafu Constantine | F | 43575 | Staff || 14613 | Kien Herath | M | 54124 | Staff || 19083 | Nobuyoshi Asmuth | M | 40000 | Engineer || 19135 | Leaf Soicher | M | 40000 | Senior Engineer || 19761 | Vasiliy Niizuma | M | 65098 | Staff || 19769 | Bezalel Holburn | M | 53118 | Engineer || 22892 | Giao Monkewich | M | 79554 | Senior Staff || 24101 | Yakichi Manderick | F | 45092 | Engineer |+--------+-------------------+--------+--------+-----------------+10 rows in set, 1 warning (0.07 sec)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux查看日志文件常用命令]]></title>
      <url>%2F20170407-linux%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[linux查看日志文件内容命令tail、cat、tac、head、echotail -f test.log你会看到屏幕不断有内容被打印出来. 这时候中断第一个进程Ctrl-C,cat -n hisen.log | grep ‘907’在文件当中查找指定的内容，这里是查询：907linux 如何显示一个文件的某几行(中间几行)从第3000行开始，显示1000行。即显示3000~3999行1cat filename | tail -n +3000 | head -n 1000显示1000行到3000行1cat filename| head -n 3000 | tail -n +1000*注意两种方法的顺序分解：tail -n 1000：显示最后1000行tail -n +1000：从1000行开始显示，显示1000行以后的head -n 1000：显示前面1000行用sed命令sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。例：cat mylog.log | tail -n 1000 #输出mylog.log 文件最后一千行cat主要有三大功能：1.一次显示整个文件。$ cat filename2.从键盘创建一个文件。$ cat &gt; filename只能创建新文件,不能编辑已有文件.3.将几个文件合并为一个文件： $cat file1 file2 &gt; file参数：-n 或 –number 由 1 开始对所有输出的行数编号-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行-v 或 –show-nonprinting例：把 textfile1 的档案内容加上行号后输入 textfile2 这个档案里1cat -n textfile1 &gt; textfile2把 textfile1 和 textfile2 的档案内容加上行号（空白行不加）之后将内容附加到 textfile3 里。1cat -b textfile1 textfile2 &gt;&gt; textfile3把test.txt文件扔进垃圾箱，赋空值test.txt1cat /dev/null &gt; /etc/test.txt注意：&gt;意思是创建，&gt;&gt;是追加。千万不要弄混了。tac (反向列示)tac 是将 cat 反写过来，所以他的功能就跟 cat 相反， cat 是由第一行到最后一行连续显示在萤幕上，而 tac 则是由最后一行到第一行反向在萤幕上显示出来！在Linux中echo命令用来在标准输出上显示一段字符，比如：echo “the echo command test!”这个就会输出“the echo command test!”这一行文字！echo “the echo command test!”&gt;a.sh这个就会在a.sh文件中输出“the echo command test!”这一行文字！该命令的一般格式为： echo [ -n ] 字符串其中选项n表示输出文字后不换行；字符串能加引号，也能不加引号。用echo命令输出加引号的字符串时，将字符串原样输出；用echo命令输出不加引号的字符串时，将字符串中的各个单词作为字符串输出，各字符串之间用一个空格分割。一些实例1234567891011121314151617181920212223242526272829303132333435363738394041424344#在整个文件搜索含有907的内容hisen@ubuntu:~/dl$ cat -n hisen.log | grep &apos;907&apos; 25 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art 26 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep#从第3行开始,显示10行 即：3~12 并且显示行号hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n +3 | head -n 10 3 07-Apr-2017 15:48:50.072 信息 [main] org.apache.coyote.Abstrac 4 07-Apr-2017 15:48:50.137 信息 [main] Using a shared selector f 5 07-Apr-2017 15:48:50.172 测试 [main] Initializing ProtocolHand 6 07-Apr-2017 15:48:50.186 信息 [main] Using a shared selector f 7 07-Apr-2017 15:48:50.187 你猜 [main] load Initialization proce 8 07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte 9 07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To 10 07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler 11 07-Apr-2017 15:48:50.318 哪里 [main] ProtocolHandler [ajp-nio- 12 07-Apr-2017 15:48:50.328 信息 [main] start Server startup in 1#显示10行前三行hisen@ubuntu:~/dl$ cat -n hisen.log | head -n +10 | tail -n 3 8 07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte 9 07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To 10 07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler#显示3-10行hisen@ubuntu:~/dl$ cat -n hisen.log | head -n 10 | tail -n +3 3 07-Apr-2017 15:48:50.072 信息 [main] org.apache.coyote.Abstrac 4 07-Apr-2017 15:48:50.137 信息 [main] Using a shared selector f 5 07-Apr-2017 15:48:50.172 测试 [main] Initializing ProtocolHand 6 07-Apr-2017 15:48:50.186 信息 [main] Using a shared selector f 7 07-Apr-2017 15:48:50.187 你猜 [main] load Initialization proce 8 07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte 9 07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To 10 07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler#显示倒数第二行hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n 2 25 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art 26 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep#从24行开始，显示到最后hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n +24 24 07-Apr-2017 15:49:04.585 信息 during time. 25 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art 26 [2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo next主题添加本地搜索 - 不使用第三方服务]]></title>
      <url>%2F20170407-Hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%20-%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%2F</url>
      <content type="text"><![CDATA[之前安装过第三方的搜索服务，贼蛋疼。都不免费了。也有自己安装插件，然后写js的，麻烦后来找到两个插件，安装之后就搞定了感谢开发的作者！！！安装插件记得要在站点根目录执行下面的安装操作1.安装 hexo-generator-search1npm install hexo-generator-searchdb --save2.安装 hexo-generator-searchdb1npm install hexo-generator-searchdb --save启用搜索编辑站点文件_config.yml，添加以下内容开启搜索12345search: path: search.xml field: post format: html limit: 10000编辑主题文件_config.yml，启用本地搜索功能：# Local search local_search: enable: true 效果预览小缺点第一次点击搜索的时候反应会比较慢因为是要加载一个xml文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[DBeaver-连接全部数据库工具-DBeaver快捷键]]></title>
      <url>%2F20170402-DBeaver-%E8%BF%9E%E6%8E%A5%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7-DBeaver%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
      <content type="text"><![CDATA[Windows、Linux、Mac OS X多个平台都可以用据我观察这个数据库可视化工具很不错，基于java以各种驱动来连接数据库，也就是说java支持的数据库都可以用他连接挺好用的，免费！！！安装之后新建连接，选择你要链接的数据库，配置一下就好了。下载地址官网下载地址快捷键123456#Shift + Home选中当前光标到行首#Shift + End选中当前光标到行尾#Shift + ↑/↓/←/→ 移动光标并且选中#Alt + X 执行选中的sql#Ctrl + Enter 执行当前光标所在行的sql#Ctrl + Alt + F 格式化SQL（file -&gt; properties -&gt; +SQL Editor -&gt; SQL formatting）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mysql数据库安装官方自带employees测试库]]></title>
      <url>%2F20170401-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%AE%98%E6%96%B9%E8%87%AA%E5%B8%A6employees%E6%B5%8B%E8%AF%95%E8%A1%A8%2F</url>
      <content type="text"><![CDATA[mysql官方是有一个自带的数据库，名为：Employees Sample Database官网介绍：Employees Sample Database表名中文department部门表dept_emp部门员工任职期表(按部门&amp;时期)dept_manager部门经理任职期表(按时期)employees员工详情表salaries员工薪资表(按时期)title员工职称表(按时期)导入的操作过程，在ubuntu上进行操作一、导入数据库操作过程12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#ubuntu apt-get 安装的mysql默认的配置文件#添加一行：default-storage-engine=InnoDBhisen@ubuntu:/$ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf#获取root权限hisen@ubuntu:/var/lib$ suPassword: #进数据库目录root@ubuntu:# cd /var/lib/mysql#删除两个文件root@ubuntu:/var/lib/mysql# rm ib_logfile0 root@ubuntu:/var/lib/mysql# rm ib_logfile1#重启数据库root@ubuntu:/# service mysql restart#下载Employees databasehisen@ubuntu:~/dl$ wget https://codeload.github.com/datacharmer/test_db/zip/master#解压hisen@ubuntu:~/dl$ unzip master#查看hisen@ubuntu:~/dl$ lltotal 35840drwxrwxr-x 3 hisen hisen 4096 Apr 1 16:50 ./drwxr-xr-x 10 hisen hisen 4096 Apr 1 16:40 ../-rw-rw-r-- 1 hisen hisen 36687570 Apr 1 16:30 masterdrwxrwxr-x 4 hisen hisen 4096 Oct 14 2015 test_db-master/#进目录hisen@ubuntu:~/dl$ cd test_db-master/#导入数据库hisen@ubuntu:~/dl/test_db-master$ mysql -u root -p &lt; employees.sqlEnter password: INFOCREATING DATABASE STRUCTUREINFOstorage engine: InnoDBINFOLOADING departmentsINFOLOADING employeesINFOLOADING dept_empINFOLOADING dept_managerINFOLOADING titlesINFOLOADING salariesdata_load_time_diff00:01:11#导入成功#验证是否导入成功hisen@ubuntu:~/dl/test_db-master$ mysql -u root -p &lt; test_employees_md5.sqlEnter password: INFOTESTING INSTALLATIONtable_name expected_records expected_crcemployees 300024 4ec56ab5ba37218d187cf6ab09ce1aa1departments 9 d1af5e170d2d1591d776d5638d71fc5fdept_manager 24 8720e2f0853ac9096b689c14664f847edept_emp 331603 ccf6fe516f990bdaa49713fc478701b7titles 443308 bfa016c472df68e70a03facafa1bc0a8salaries 2844047 fd220654e95aea1b169624ffe3fca934table_name found_records found_crcemployees 300024 4ec56ab5ba37218d187cf6ab09ce1aa1departments 9 d1af5e170d2d1591d776d5638d71fc5fdept_manager 24 8720e2f0853ac9096b689c14664f847edept_emp 331603 ccf6fe516f990bdaa49713fc478701b7titles 443308 bfa016c472df68e70a03facafa1bc0a8salaries 2844047 fd220654e95aea1b169624ffe3fca934table_name records_match crc_matchemployees OK okdepartments OK okdept_manager OK okdept_emp OK oktitles OK oksalaries OK okcomputation_time00:00:22summary resultCRC OKcount OK二、数据库练习练习题：点击查看练习题]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[su Authentication failure]]></title>
      <url>%2F20170401-su%20%20Authentication%20failure%2F</url>
      <content type="text"><![CDATA[想要获取root权限，提示如下123hisen@ubuntu:/var/lib$ suPassword: su: Authentication failure解决办法1234567hisen@ubuntu:$ sudo passwd rootEnter new UNIX password: Retype new UNIX password: passwd: password updated successfullyhisen@ubuntu:$ suPassword: root@ubuntu:# cd mysql重新设置一下密码即可，我这边装的时候设置的用户是：hisen刚刚重新设置的密码就是你装系统的时候设置的用户密码。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA设置intellij-java-google-style]]></title>
      <url>%2F20170401-IDEA%E8%AE%BE%E7%BD%AEintellij-java-google-style%2F</url>
      <content type="text"><![CDATA[一直想弄个格式化代码，后来发现很多人用谷歌的，于是也来整一份保存一份google code的xml，链接有最新的intellij-java-google-style.xml设置方法如下：Setting -&gt; Editor -&gt; Code Stytle -&gt; Java最后一步就选择你存放之前保存的xml然后就大功告成，来个对比前1234567891011121314package com.hisen.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * Created by hisenyuan on 2017/3/23 at 18:02. */public class test &#123; public static void main(String[] args) &#123;String s = &quot;&#123;&apos;A&apos;:&apos;a&apos;&#125;&quot;; JSONObject obj= JSON.parseObject(s); System.out.println(obj.get(&quot;A&quot;)); &#125;&#125;后12345678910111213141516package com.hisen.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * Created by hisenyuan on 2017/3/23 at 18:02. */public class test &#123; public static void main(String[] args) &#123; String s = &quot;&#123;&apos;A&apos;:&apos;a&apos;&#125;&quot;; JSONObject obj = JSON.parseObject(s); System.out.println(obj.get(&quot;A&quot;)); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java判断全角半角字符以及相互转换]]></title>
      <url>%2F20170401-Java%E5%88%A4%E6%96%AD%E5%85%A8%E8%A7%92%E5%8D%8A%E8%A7%92%E5%AD%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2%2F</url>
      <content type="text"><![CDATA[在计算机屏幕上，一个汉字要占两个英文字符的位置，人们把一个英文字符所占的位置称为”半角”，相对地把一个汉字所占的位置称为”全角”。在汉字输入时，系统提供”半角”和”全角”两种不同的输入状态，但是对于英文字母、符号和数字这些通用字符就不同于汉字，在半角状态它们被作为英文字符处理；而在全角状态，它们又可作为中文字符处理。半角和全角切换方法：单击输入法工具条上的按钮或按键盘上的Shift+Space键来切换。1、全角：指一个字符占用两个标准字符位置。汉字字符和规定了全角的英文字符及国标GB2312-80中的图形符号和特殊字符都是全角字符。一般的系统命令是不用全角字符的，只是在作文字处理时才会使用全角字符。2、半角：指一字符占用一个标准的字符位置。通常的英文字母、数字键、符号键都是半角的，半角的显示内码都是一个字节。在系统内部，以上三种字符是作为基本代码处理的，所以用户输入命令和参数时一般都使用半角。3、全角与半角各在什么情况下使用？全角占两个字节，半角占一个字节。半角全角主要是针对标点符号来说的，全角标点占两个字节，半角占一个字节，而不管是半角还是全角，汉字都还是要占两个字节。在编程序的源代码中只能使用半角标点（不包括字符串内部的数据）在不支持汉字等语言的计算机上只能使用半角标点（其实这种情况根本就不存在半角全角的概念）对于大多数字体来说，全角看起来比半角大，当然这不是本质区别了。4、全角和半角的区别全角就是字母和数字等与汉字占等宽位置的字。半角就是ASCII方式的字符，在没有汉字输入法起做用的时候输入的字母数字和字符都是半角的。在汉字输入法出现的时候，输入的字母数字默认为半角，但是标点则是默认为全角，可以通过鼠标点击输入法工具条上的相应按钮来改变。5、关于“全角”和“半角”：全角：是指中GB2312-80（《信息交换用汉字编码字符集·基本集》）中的各种符号。半角：是指英文件ASCII码中的各种符号。全角状态下字母、数字符号等都会占两个字节的位置，也就是一个汉字那么宽，半角状态下，字母数字符号一般会占一个字节，也就是半个汉字的位置，全角半角对汉字没有影响。有两种方式可以判断:1:通过正则表达式来进行判断 [^\x00-\xff]2: 通过字符编码的范围进行判断.通过打印所有的字符发现：半角字符是从33开始到126结束与半角字符对应的全角字符是从65281开始到65374结束其中半角的空格是32.对应的全角空格是12288半角和全角的关系很明显,除空格外的字符偏移量是65248(65281-33 = 65248)具体的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130package com.hisen.String;/** * 半角字符和全角字符的转换 以及 判断 * Created by hisenyuan on 2017/4/1 at 10:37. */public class FullHalf &#123; /** * ASCII表中可见字符从!开始，偏移位值为33(Decimal) */ static final char DBC_CHAR_START = 33; // 半角! /** * ASCII表中可见字符到~结束，偏移位值为126(Decimal) */ static final char DBC_CHAR_END = 126; // 半角~ /** * 全角对应于ASCII表的可见字符从！开始，偏移值为65281 */ static final char SBC_CHAR_START = 65281; // 全角！ /** * 全角对应于ASCII表的可见字符到～结束，偏移值为65374 */ static final char SBC_CHAR_END = 65374; // 全角～ /** * ASCII表中除空格外的可见字符与对应的全角字符的相对偏移 */ static final int CONVERT_STEP = 65248; // 全角半角转换间隔 /** * 全角空格的值，它没有遵从与ASCII的相对偏移，必须单独处理 */ static final char SBC_SPACE = 12288; // 全角空格 12288 /** * 半角空格的值，在ASCII中为32(Decimal) */ static final char DBC_SPACE = &apos; &apos;; // 半角空格 public static void main(String[] args) &#123; String s = &quot;123456&quot;; //半角转换成全角字符 String s1 = bj2qj(s); //全角转换成半角 String s2 = qj2bj(s1); System.out.println(&quot;全角：&quot;+s1 +&quot; -&gt; 半角：&quot;+s2); System.out.println(&quot;--------------------------&quot;); String fh = s1+s2; //判断全角还是半角 fullOrHalf(fh); //打印ASCII表中所有字符 printAllChar(); &#125; /** * &lt;PRE&gt; * 半角字符-&gt;全角字符转换 * 只处理空格，!到˜之间的字符，忽略其他 * &lt;/PRE&gt; */ private static String bj2qj(String src) &#123; if (src == null) &#123; return src; &#125; StringBuilder buf = new StringBuilder(src.length()); char[] ca = src.toCharArray(); for (int i = 0; i &lt; ca.length; i++) &#123; if (ca[i] == DBC_SPACE) &#123; // 如果是半角空格，直接用全角空格替代 buf.append(SBC_SPACE); &#125; else if ((ca[i] &gt;= DBC_CHAR_START) &amp;&amp; (ca[i] &lt;= DBC_CHAR_END)) &#123; // 字符是!到~之间的可见字符 buf.append((char) (ca[i] + CONVERT_STEP)); &#125; else &#123; // 不对空格以及ascii表中其他可见字符之外的字符做任何处理 buf.append(ca[i]); &#125; &#125; return buf.toString(); &#125; /** * &lt;PRE&gt; * 全角字符-&gt;半角字符转换 * 只处理全角的空格，全角！到全角～之间的字符，忽略其他 * &lt;/PRE&gt; */ public static String qj2bj(String src) &#123; if (src == null) &#123; return src; &#125; StringBuilder buf = new StringBuilder(src.length()); char[] ca = src.toCharArray(); for (int i = 0; i &lt; src.length(); i++) &#123; if (ca[i] &gt;= SBC_CHAR_START &amp;&amp; ca[i] &lt;= SBC_CHAR_END) &#123; // 如果位于全角！到全角～区间内 buf.append((char) (ca[i] - CONVERT_STEP)); &#125; else if (ca[i] == SBC_SPACE) &#123; // 如果是全角空格 buf.append(DBC_SPACE); &#125; else &#123; // 不处理全角空格，全角！到全角～区间外的字符 buf.append(ca[i]); &#125; &#125; return buf.toString(); &#125; /** * 使用正则表达式判断字符是否为全角 * @param str */ public static void fullOrHalf(String str)&#123; char[] chars = str.toCharArray(); for (int i = 0; i &lt; chars.length; i++) &#123; String temp = String.valueOf(chars[i]); // 正则判断是全角字符 if (temp.matches(&quot;[^\\x00-\\xff]&quot;)) &#123; System.out.println(&quot;全角 -&gt; &quot; + temp); &#125; // 判断是半角字符 else &#123; System.out.println(&quot;半角 -&gt; &quot; + temp); &#125; &#125; &#125; /** * 打印所有字符 */ public static void printAllChar()&#123; for (int i = Character.MIN_VALUE; i &lt;= Character.MAX_VALUE; ++i) &#123; System.out.println(&quot;ASCII：&quot;+i + &quot; -&gt; &quot; + &quot;字符：&quot;+(char)i); &#125; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA部署tomcat项目前台传输的json到后台乱码 - IDEA乱码解决]]></title>
      <url>%2F20170330-IDEA%E9%83%A8%E7%BD%B2tomcat%E9%A1%B9%E7%9B%AE%E5%89%8D%E5%8F%B0%E4%BC%A0%E8%BE%93%E7%9A%84json%E5%88%B0%E5%90%8E%E5%8F%B0%E4%B9%B1%E7%A0%81%2F</url>
      <content type="text"><![CDATA[idea涉及编码的地方都改了主要是编译时候的编码，tomcat的编码，以及idea配置里面的编码一、idea配置文件1\HOME\IntelliJ IDEA 2016.3.4\bin\idea64.exe.vmoptions增加一行：-Dfile.encoding=UTF-8二、编译参数12File -&gt; Settings -&gt; Build, Execution, Deployment-&gt; Compiler -&gt; Java Compiler -&gt; Addition command line parameters在空格里面添加：-encoding utf-8三、工程编码1File -&gt; Settings -&gt; Editor -&gt; File Encodings此页面三个地方都选择UTF-8四、tomcat参数1Run/debug Configuration tomcatVM options：-Dfile.encoding=UTF-8]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Unable to ping server at localhost 1099 - 出现的原因]]></title>
      <url>%2F20170330-Unable%20to%20ping%20server%20at%20localhost%201099%20-%20%E5%87%BA%E7%8E%B0%E7%9A%84%E5%8E%9F%E5%9B%A0%2F</url>
      <content type="text"><![CDATA[之前老是出现12Application Server was not connected before run configuration stop, reason: Unable to ping server at localhost:1099我遇到这个问题一般是这些原因：这个端口被占用，一般进程管理把所有java进程杀了可以解决由于在IDEA中错误的给tomcat添加了参数,比如下面这个。去掉即可这是下VM option中加了：-URIEncoding=UTF-8123Error: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit.Unrecognized option: -URIEncoding=UTF-8]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Oracle性能优化常用的SQL]]></title>
      <url>%2F20170329-Oracle%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B8%B8%E7%94%A8%E7%9A%84SQL%2F</url>
      <content type="text"><![CDATA[使用如下sql能查出相应的信息，oracle博大精深要掌握得花时间太长了，来个阅读全文吧123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181--显示数据库当前连接数select count(*) from v$process;--显示数据库最大连接数select value from v$parameter where name =&apos;processes&apos;;--修改最大Oracle最大连接数:alter system set processes = 300 scope = spfile;--显示当前session连接数select count(*) from v$session;--查看当前有哪些用户正在使用数据SELECT osuser, a.username,cpu_time/executions/1000000||&apos;s&apos;, sql_fulltext,machine from v$session a, v$sqlarea b where a.sql_address =b.address order by cpu_time/executions desc;--查看连接oracle的所有机器的连接数select machine,count(*) from v$session group by machine;--查看连接oracle的所有机器的连接数和状态select machine,status,count(*) from v$session group by machine,status order by status;--查看消耗磁盘读取最多的SQL Top 5：select disk_reads,sql_text,SQL_FULLTEXTfrom (select sql_text,disk_reads,SQL_FULLTEXT, dense_rank() over (order by disk_reads desc) disk_reads_rank from v$sql)where disk_reads_rank &lt;=5;--开始--通过linux中消耗资源高的进程号获取oracle消耗资源的sql语句：--1.linux中使用top命名查看oracle进程中消耗资源最高的进程号；--2.oracle中使用命令：select c.spid,a.p1,a.p1raw,a.p2,a.event,b.sql_text,b.SQL_FULLTEXT,b.SQL_ID from v$session a,v$sql b,v$process c where a.wait_class&lt;&gt;&apos;Idle&apos; and a.sql_id=b.sql_id and a.PADDR=c.addr order by event;--3.查询结果显示出各个sql语句对应的进程号，从中找出top命令中对应消耗资源高的进程号即可找到相应的sql语句。--结束--判断回滚段竞争的SQL语句：（当Ratio大于2时存在回滚段竞争，需要增加更多的回滚段）select rn.name, rs.GETS, rs.WAITS, (rs.WAITS / rs.GETS) * 100 ratiofrom v$rollstat rs, v$rollname rnwhere rs.USN = rn.usn;---判断恢复日志竞争的SQL语句：（immediate_contention或wait_contention的值大于1时存在竞争）select name,(t.IMMEDIATE_MISSES / decode((t.IMMEDIATE_GETS + t.IMMEDIATE_MISSES),0,-1,(t.IMMEDIATE_GETS + t.IMMEDIATE_MISSES))) * 100 immediate_contention,(t.MISSES / decode((t.GETS + t.MISSES), 0, -1, (t.GETS + t.MISSES))) * 100 wait_contentionfrom v$latch twhere name in (&apos;redo copy&apos;, &apos;redo allocation&apos;);--判断表空间碎片：（如果最大空闲空间占总空间很大比例则可能不存在碎片，如果比例较小，且有许多空闲空间，则可能碎片很多）select t.tablespace_name,sum(t.bytes),max(t.bytes),count(*),max(t.bytes) / sum(t.bytes) radiofrom dba_free_space tgroup by t.tablespace_nameorder by t.tablespace_name;--确定命中排序域的次数：select t.NAME, t.VALUE from v$sysstat t where t.NAME like &apos;sort%&apos;--查看当前SGA值：SGA(System Global Area)系统全局区。这是一个非常庞大的内存区间select * from v$sga;--确定高速缓冲区命中率：（如果命中率低于70％，则应该加大init.ora参数中的DB_BLOCK_BUFFER的值）select 1 - sum(decode(name, &apos;physical reads&apos;, value, 0)) /(sum(decode(name, &apos;db block gets&apos;, value, 0)) +sum(decode(name, &apos;consistent gets&apos;, value, 0))) hit_ratiofrom v$sysstat twhere name in (&apos;physical reads&apos;, &apos;db block gets&apos;, &apos;consistent gets&apos;);--确定共享池中的命中率：（如果ratio1大于1时，需要加大共享池，如果ratio2大于10％时，需要加大共享池SHARED_POOL_SIZE）select * from( select sum(pins) pins, sum(reloads) reloads, (sum(reloads) / sum(pins)) * 100 ratio1 from v$librarycache),( select sum(gets) gets, sum(getmisses) getmisses, (sum(getmisses) / sum(gets)) * 100 ratio2 from v$rowcache)--查询INIT.ORA参数：select * from v$parameter;--求当前会话的SID，SERIAL#SELECT Sid, Serial# FROM V$sessionWHERE Audsid = Sys_Context(&apos;USERENV&apos;, &apos;SESSIONID&apos;);--查询session的OS进程ID(有输入)SELECT p.Spid &quot;OS Thread&quot;, b.NAME &quot;Name-User&quot;, s.Program, s.Sid, s.Serial#,s.Osuser, s.MachineFROM V$process p, V$session s, V$bgprocess bWHERE p.Addr = s.PaddrAND p.Addr = b.Paddr And (s.sid=&amp;1 or p.spid=&amp;1)UNION ALLSELECT p.Spid &quot;OS Thread&quot;, s.Username &quot;Name-User&quot;, s.Program, s.Sid,s.Serial#, s.Osuser, s.MachineFROM V$process p, V$session sWHERE p.Addr = s.PaddrAnd (s.sid=&amp;1 or p.spid=&amp;1)AND s.Username IS NOT NULL;--查看锁（lock）情况SELECT /*+ RULE */ Ls.Osuser Os_User_Name, Ls.Username User_Name,Decode(Ls.TYPE,&apos;RW&apos;, &apos;Row wait enqueue lock&apos;, &apos;TM&apos;, &apos;DML enqueue lock&apos;,&apos;TX&apos;, &apos;Transaction enqueue lock&apos;, &apos;UL&apos;, &apos;User supplied lock&apos;) Lock_Type,o.Object_Name OBJECT,Decode(Ls.Lmode,1, NULL, 2, &apos;Row Share&apos;, 3, &apos;Row Exclusive&apos;,4, &apos;Share&apos;, 5, &apos;Share Row Exclusive&apos;, 6, &apos;Exclusive&apos;,NULL) Lock_Mode,o.Owner, Ls.Sid, Ls.Serial# Serial_Num, Ls.Id1, Ls.Id2 FROM Sys.Dba_Objects o, (SELECT s.Osuser, s.Username, l.TYPE, l.Lmode, s.Sid, s.Serial#, l.Id1,l.Id2 FROM V$session s, V$lock lWHERE s.Sid = l.Sid) LsWHERE o.Object_Id = Ls.Id1AND o.Owner &lt;&gt; &apos;SYS&apos;ORDER BY o.Owner, o.Object_Name;--查看等待（wait）情况SELECT Ws.CLASS, Ws.COUNT COUNT, SUM(Ss.VALUE) Sum_ValueFROM V$waitstat Ws, V$sysstat SsWHERE Ss.NAME IN (&apos;db block gets&apos;, &apos;consistent gets&apos;)GROUP BY Ws.CLASS, Ws.COUNT;--求process/session的状态SELECT p.Pid, p.Spid, s.Program, s.Sid, s.Serial#FROM V$process p, V$session sWHERE s.Paddr = p.Addr;--查看表空间的名称及大小select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_sizefrom dba_tablespaces t, dba_data_files dwhere t.tablespace_name = d.tablespace_namegroup by t.tablespace_name;--查看表空间物理文件的名称及大小select tablespace_name, file_id, file_name,round(bytes/(1024*1024),0) total_spacefrom dba_data_filesorder by tablespace_name;--查看回滚段名称及大小select segment_name, tablespace_name, r.status,(initial_extent/1024) InitialExtent,(next_extent/1024) NextExtent,--查看控制文件select name from v$controlfile;--查看日志文件select member from v$logfile;--查看表空间的使用情况select sum(bytes)/(1024*1024) as free_space,tablespace_namefrom dba_free_spacegroup by tablespace_name;SELECT A.TABLESPACE_NAME,A.BYTES TOTAL,B.BYTES USED, C.BYTES FREE,(B.BYTES*100)/A.BYTES &quot;% USED&quot;,(C.BYTES*100)/A.BYTES &quot;% FREE&quot;FROM SYS.SM$TS_AVAIL A,SYS.SM$TS_USED B,SYS.SM$TS_FREE CWHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME AND A.TABLESPACE_NAME=C.TABLESPACE_NAME;--捕捉运行很久的SQLselect username,sid,opname,round(sofar*100 / totalwork,0) || &apos;%&apos; as progress,time_remaining,sql_textfrom v$session_longops , v$sqlwhere time_remaining &lt;&gt; 0and sql_address = addressand sql_hash_value = hash_value--耗资源的进程（top session）select s.schemaname schema_name, decode(sign(48 - command), 1,to_char(command), &apos;Action Code #&apos; || to_char(command) ) action, statussession_status, s.osuser os_user_name, s.sid, p.spid , s.serial# serial_num,nvl(s.username, &apos;[Oracle process]&apos;) user_name, s.terminal terminal,s.program program, st.value criteria_value from v$sesstat st, v$session s , v$process pwhere st.sid = s.sid and st.statistic# = to_number(&apos;38&apos;) and (&apos;ALL&apos; = &apos;ALL&apos;or s.status = &apos;ALL&apos;) and p.addr = s.paddr order by st.value desc, p.spid asc, s.username asc, s.osuser asc--查看有哪些实例在运行：select * from v$active_instances;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA智能补全快捷键更改为Ctrl + 逗号]]></title>
      <url>%2F20170328-IDEA%E6%99%BA%E8%83%BD%E8%A1%A5%E5%85%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%9B%B4%E6%94%B9%E4%B8%BACtrl%20%2B%20%E9%80%97%E5%8F%B7%2F</url>
      <content type="text"><![CDATA[一直就听说idea的智能补全很厉害，但是Ctrl + 空格 被万恶的输入法给占用了网上搜也不是很清晰，这里就写个博客记录一下快捷键设置：file－&gt;setting-&gt;Keymap-&gt;Main menu-&gt;Code-&gt;Completion-&gt;Basic找到之后右键Add keyboard Shortcut，然后按下：Ctrl + 逗号]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Oracle中exists在update中无法限制住条件，在select中可以]]></title>
      <url>%2F20170323-Oracle%E4%B8%ADexists%E5%9C%A8update%E4%B8%AD%E6%97%A0%E6%B3%95%E9%99%90%E5%88%B6%E4%BD%8F%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%9C%A8select%E4%B8%AD%E5%8F%AF%E4%BB%A5%2F</url>
      <content type="text"><![CDATA[这个问题是自己写的一个bug，标示不知道原因是什么现在暂时使用 in 代替解决了下面的查询是能限制住acct_type12345SELECT ew.customer_id,cf.acct_typeFROM ew_quota_info ew, cf_customer cfWHERE cf.acct_type in(2,3) AND ew.customer_id = cf.id但是在update的时候,会把acct_type=1的也更新了123456789update ew_quota_info ewset ew.all_amt = 100000where exists(SELECT ew.customer_idFROM ew_quota_info ew, cf_customer cfWHERE cf.acct_type in(2,3) AND ew.customer_id = cf.id)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Intellij IDEA中使用MyBatis-generator 自动生成MyBatis代码]]></title>
      <url>%2F20170322-Intellij%20IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8MyBatis-generator%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90MyBatis%E4%BB%A3%E7%A0%81%2F</url>
      <content type="text"><![CDATA[MyBatis Generator是一个非常方便的代码生成工具，可以根据数据库中表结构自动生成CRUD代码，可以满足大部分需求。MyBatis Generator (MBG) 是一个Mybatis的代码生成器 ，可以根据数据库中表结构自动生成简单的CRUD（插入，查询，更新，删除）操作。但联合查询和存储过程，需手动手写SQL和对象。PS:配置过程中请注意自己的工程目录结构一、pom.xml添加插件123456789101112131415&lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;configuration&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/plugin&gt;二、配置generatorConfig.xmlresources下建generatorConfig.xml,作为mybatis-generator-maven-plugin插件的执行目标。1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;context id=&quot;mysqlgenerator&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!--数据库连接信息--&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/ssm&quot; userId=&quot;root&quot; password=&quot;hisen&quot; /&gt; &lt;!--代码相关路径和包--&gt; &lt;javaModelGenerator targetPackage=&quot;com.hisen.mybatis.model&quot; targetProject=&quot;src/main/java&quot; /&gt; &lt;sqlMapGenerator targetPackage=&quot;com.hisen.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot; /&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.hisen.mybatis.mapper&quot; targetProject=&quot;src/main/java&quot; /&gt; &lt;!--表名--&gt; &lt;table tableName=&quot;appointment&quot;/&gt; &lt;table tableName=&quot;book&quot;/&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt;三、Intellij配置MyBatis Generator生成代码的运行方式：命令行、使用Ant、使用Maven、Java编码。本文采用Maven插件mybatis-generator-maven-plugin来运行MyBatis Generator，用的是命令行的方式。配置插件选择目录，输入命令：mybatis-generator:generate -e找到插件。双击执行即可看到生成的文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu安装nginx]]></title>
      <url>%2F20170321-Ubuntu%E5%AE%89%E8%A3%85nginx%2F</url>
      <content type="text"><![CDATA[Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。说明：这只是一个初步的安装，后续进一步实践安装Nginx依赖库1234567891011121314151617181920212223242526272829#安装gcc g++的依赖库sudo apt-get install build-essentialsudo apt-get install libtool#安装 pcre依赖库sudo apt-get updatesudo apt-get install libpcre3 libpcre3-dev#安装 zlib依赖库（http://www.zlib.net）sudo apt-get install zlib1g-dev#安装 ssl依赖库sudo apt-get install openssl#下载最新版本：wget http://nginx.org/download/nginx-1.9.9.tar.gz#解压tar -zxvf nginx-1.9.9.tar.gz#进入解压目录：cd nginx-1.9.9#配置：sudo ./configure --prefix=/usr/local/nginx #编辑nginx：sudo make#注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory#需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev#安装nginx：sudo make install#启动nginx：sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf#注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。#查看nginx进程：ps -ef|grep nginxNginx常用命令1234567891011121314#启动sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf#进入目录cd /usr/local/nginx/#关闭sudo ./sbin/nginx -s quit#Nginx重新加载配置sudo ./sbin/nginx -s reload#指定配置文件sudo ./sbin/nginx -c /usr/local/nginx/conf/nginx.conf#查看版本sudo ./sbin/nginx -v#显示帮助sudo ./sbin/nginx -h安装之后就直接监听80端口，浏览器打开127.0.0.1即可访问出现如下页面：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[log4j日志信息插入mysql数据库]]></title>
      <url>%2F20170321-log4j%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF%E6%8F%92%E5%85%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
      <content type="text"><![CDATA[以前不知道这玩意还能直接插入MySQL数据库我是使用IDEA，maven具体的目录结果见github：githublog4j配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#可以设置级别：debug&gt;info&gt;error#debug：显示debug、info、error#info：显示info、error#error：只errorlog4j.rootLogger=debug,info,database#注意的地方database 对应 log4j.appender.database.URL的database 若认log4j.rootLogger=debug,info,db 那么 log4j.appender.database.URL的database 要改成db#log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender#log4j.appender.logfile.DatePattern=.yyyy-MM-dd#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout#输出到控制台#log4j.appender.appender1=org.apache.log4j.ConsoleAppender#样式为TTCCLayout#log4j.appender.appender1.layout=org.apache.log4j.TTCCLayout#设置级别：#log4j.rootLogger=debug,appender1#输出到文件(这里默认为追加方式)#log4j.appender.appender1=org.apache.log4j.FileAppender#设置文件输出路径#【1】文本文件#log4j.appender.appender1.File=c:/Log4JDemo02.log#【2】HTML文件log4j.appender.appender1.File=c:/Log4JDemo02.html #设置文件输出样式#log4j.appender.appender1.layout=org.apache.log4j.TTCCLayoutlog4j.appender.appender1.layout=org.apache.log4j.HTMLLayout log4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %p [%c] - - &lt;%m&gt;%nlog4j.appender.logfile=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.logfile.DatePattern=.yyyy-MM-ddlog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] wang- &lt;%m&gt;%n#下面是配置将日志信息插入数据库，#配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender#这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppenderlog4j.appender.database.Threshold=info#定义什么级别的错误将写入到数据库中log4j.appender.database.BufferSize=1#设置缓存大小，就是当有1条日志信息是才往数据库插一次log4j.appender.database=org.apache.log4j.jdbc.JDBCAppenderlog4j.appender.database.driver=com.mysql.jdbc.Driver#设置要将日志插入到数据库的驱动log4j.appender.database.URL=jdbc:mysql://127.0.0.1:3306/log4j?useUnicode=true&amp;characterEncoding=UTF-8log4j.appender.database.user=rootlog4j.appender.database.password=hisenlog4j.appender.database.sql=insert into log (Class,Mothod,createTime,LogLevel,MSG) values (&apos;%C&apos;,&apos;%M&apos;,&apos;%d&#123;yyyy-MM-dd HH:mm:ss&#125;&apos;,&apos;%p&apos;,&apos;%m&apos;)log4j.appender.database.layout=org.apache.log4j.PatternLayout测试类123456789101112131415161718192021222324252627282930package com.hisen.log4j.log4j2MySQL;import org.apache.log4j.Logger;/** * 测试一下log4j把日志插入到mysql数据库 * 插入语句和数据库配置在log4j的配置文件中 * Created by hisenyuan on 2017/3/21 at 14:23. */public class Log4jDemo &#123; private static Logger logger = Logger.getLogger(Log4jDemo.class); public static void main(String[] args) &#123; logger.debug(&quot;这是debug信息&quot;); // 记录info级别的信息 logger.info(&quot;这是info信息&quot;); logger.info(&quot;这里做了一个XX操作，入库，做操作日志&quot;); // 记录error级别的信息 logger.error(&quot;这是error信息&quot;); hisen(); &#125; public static void hisen() &#123; logger.debug(&quot;这是方法中debug信息&quot;); // 记录info级别的信息 logger.info(&quot;这是方法中info信息&quot;); // 记录error级别的信息 logger.error(&quot;这是方法中error信息&quot;); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[企业邮箱签名模版]]></title>
      <url>%2F20170317-%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E7%AD%BE%E5%90%8D%E6%A8%A1%E7%89%88%2F</url>
      <content type="text"><![CDATA[下面是源码，有些邮箱可以直接用html源码设置。我用得是网易邮箱大师，把代码存为本地网页打开全选复制粘贴到邮箱大师的签名里面即可！亲测有效，还挺好看的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;style&gt;.g &#123;clear:both; height:0;&#125;.mailsign &#123;font-size:12px; color:#808080; margin:0 35px; line-height:22px;&#125;.logo &#123;width:305px; height:35px; margin:20px 0 10px -15px;&#125;.name &#123;font-weight:700; font-size:14px; float:left; color:#808080; height:30px; line-height:30px;&#125;.position &#123;float:left; margin-left:15px; color:#808080; height:30px; line-height:30px;&#125;.company1 &#123;clear:both; font-weight:700; font-size:14px; color:#808080; margin-top:10px;&#125;.company2 &#123;clear:both; font-weight:700; font-size:14px; color:#808080; margin-bottom:10px;&#125;.add&#123;&#125;.add .zip &#123; margin-left:5px; color:#a0a0a0; font-size:10px;&#125;.tel &#123;&#125;.fax &#123;&#125;.phone &#123;&#125;.website &#123;&#125;.website a &#123;color:#808080; text-decoration:none !important;&#125;.eng &#123;&#125;.state &#123;color:#a0a0a0; margin-top:20px; padding:15px; border:1px solid #CCC; border-radius:10px&#125;.state h4 &#123; margin:0;&#125;.state p &#123;margin:0; font-size:7.5pt;&#125;&lt;/style&gt; &lt;div class=&quot;mailsign&quot;&gt; &lt;hr /&gt; &lt;div class=&quot;g&quot;&gt; &lt;div class=&quot;name&quot;&gt; &lt;t id=&quot;tname&quot;&gt; HiSEN &lt;/t&gt; &lt;/div&gt; &lt;div class=&quot;position&quot;&gt; &lt;t id=&quot;tposition&quot;&gt; 中级java开发工程师 &lt;/t&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;g&quot;&gt;&lt;/div&gt; &lt;div class=&quot;company1&quot;&gt; HiSEN网络在线技术有限公司 &lt;/div&gt; &lt;div class=&quot;company2&quot;&gt; &lt;t id=&quot;tcompany&quot;&gt; 技术部 &lt;/t&gt; &lt;/div&gt; &lt;div class=&quot;add&quot;&gt; &lt;span&gt;地址/Add ：&lt;/span&gt; &lt;t id=&quot;tadd&quot;&gt; 北京朝阳区xxx &lt;/t&gt; &lt;div class=&quot;mob&quot;&gt; &lt;span&gt;手机/Mob：&lt;/span&gt; &lt;t id=&quot;tmob&quot;&gt; 15555555555 &lt;/t&gt; &lt;/div&gt; &lt;div class=&quot;website&quot;&gt; &lt;span&gt;网址/URL ：&lt;/span&gt; &lt;a href=&quot;http://hisen.me/&quot; target=&quot;_blank&quot;&gt;hisen.me&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;state&quot;&gt; &lt;h4&gt;保密声明：&lt;/h4&gt; &lt;p&gt;此文件中可能含有机密类信息，仅限于上方提到的人员使用。若非以上人员或负责将该信息传送给上述人员的职员或代理人，严禁对此文件作任何形式的汇报、散布、传播及复制。若非此文件的指定收件人，请立即以邮件形式联系发件人并销毁所有原始文件的拷贝。&lt;/p&gt; &lt;h4&gt;CONFIDENTIALITY NOTICE:&lt;/h4&gt; &lt;p&gt;The information contained in this transmission may contain privileged and confidential information and is intended only for the use of the person(s) named above. If you are not the intended recipient, or an employee or agent responsible for delivering this message to the intended recipient, any review, dissemination, distribution or duplication of this communication is strictly prohibited. If you are not the intended recipient, please contact the sender immediately by reply e-mail and destroy all copies of the original message.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JAVA中几种常用的RPC框架]]></title>
      <url>%2F20170317-JAVA%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6%2F</url>
      <content type="text"><![CDATA[RPC是远程过程调用的简称，广泛应用在大规模分布式应用中，作用是有助于系统的垂直拆分，使系统更易拓展。Java中的RPC框架比较多，各有特色，广泛使用的有RMI、Hessian、Dubbo等。RPC还有一个特点就是能够跨语言，本文只以JAVA语言里的RPC为例。其他的框架结构也类似，区别在于对象的序列化方法，传输对象的通讯协议，以及注册中心的管理与failover设计（利用zookeeper）。客户端和服务端可以运行在不同的JVM中，Client只需要引入接口，接口的实现以及运行时需要的数据都在Server端，RPC的主要依赖技术是序列化、反序列化和传输协议，JAVA里对应的就是对象的序列化、反序列化以及序列化后数据的传输。RMI的序列化和反序列化是JAVA自带的，Hessian里的序列化和反序列化是私有的，传输协议则是HTTP，Dubbo的序列化可以多种选择，一般使用Hessian的序列化协议，传输则是TCP协议，使用了高性能的NIO框架Netty。对于序列化，我还了解一些，像Google的ProBuffer、JBoss Marshalling和Apache Thrift等1.RMIJAVA自带的远程方法调用工具，不过有一定的局限性，毕竟是JAVA语言最开始时的设计，后来很多框架的原理都基于RMI，RMI的使用如下：对外接口123public interface IService extends Remote &#123; public String queryName(String no) throws RemoteException; &#125;服务实现12345678910111213141516171819202122232425262728import java.rmi.RemoteException;import java.rmi.server.UnicastRemoteObject;// 服务实现public class ServiceImpl extends UnicastRemoteObject implements IService &#123; /** */ private static final long serialVersionUID = 682805210518738166L; /** * @throws RemoteException */ protected ServiceImpl() throws RemoteException &#123; super(); &#125; /* (non-Javadoc) * @see com.suning.ebuy.wd.web.IService#queryName(java.lang.String) */ @Override public String queryName(String no) throws RemoteException &#123; // 方法的具体实现 System.out.println(&quot;hello&quot; + no); return String.valueOf(System.currentTimeMillis()); &#125; &#125;RMI客户端12345678910111213141516171819202122232425262728293031323334353637383940import java.rmi.AccessException;import java.rmi.NotBoundException;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;// RMI客户端public class Client &#123; public static void main(String[] args) &#123; // 注册管理器 Registry registry = null; try &#123; // 获取服务注册管理器 registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,8088); // 列出所有注册的服务 String[] list = registry.list(); for(String s : list)&#123; System.out.println(s); &#125; &#125; catch (RemoteException e) &#123; &#125; try &#123; // 根据命名获取服务 IService server = (IService) registry.lookup(&quot;vince&quot;); // 调用远程方法 String result = server.queryName(&quot;ha ha ha ha&quot;); // 输出调用结果 System.out.println(&quot;result from remote : &quot; + result); &#125; catch (AccessException e) &#123; &#125; catch (RemoteException e) &#123; &#125; catch (NotBoundException e) &#123; &#125; &#125;&#125;RMI服务端123456789101112131415161718192021222324252627282930import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;// RMI服务端public class Server &#123; public static void main(String[] args) &#123; // 注册管理器 Registry registry = null; try &#123; // 创建一个服务注册管理器 registry = LocateRegistry.createRegistry(8088); &#125; catch (RemoteException e) &#123; &#125; try &#123; // 创建一个服务 ServiceImpl server = new ServiceImpl(); // 将服务绑定命名 registry.rebind(&quot;vince&quot;, server); System.out.println(&quot;bind server&quot;); &#125; catch (RemoteException e) &#123; &#125; &#125;&#125;服务注册管理器写在了Server里，当然也可以抽出来单独作为一个服务，在其他一些框架中，往往用Zookeeper充当注册管理角色。2.Hessian（基于HTTP的远程方法调用）基于HTTP协议传输，在性能方面还不够完美，负载均衡和失效转移依赖于应用的负载均衡器，Hessian的使用则与RMI类似，区别在于淡化了Registry的角色，通过显示的地址调用，利用HessianProxyFactory根据配置的地址create一个代理对象，另外还要引入Hessian的Jar包。3、Dubbo（淘宝开源的基于TCP的RPC框架）基于Netty的高性能RPC框架，是阿里巴巴开源的，总体原理如下：在了解Dubbo之前，要先对Zookeeper有深入的理解，当理解了zookeeper后，Dubbo也就了无秘密了。Dubbo的详细说明在淘宝开源里说的非常详细，在工作中很多生产项目都用了Dubbo，过程中也发现了很多需要注意的地方.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mybatis：No constructor found in xxx matching]]></title>
      <url>%2F20170317-mybatis%EF%BC%9ANo%20constructor%20found%20in%20xxx%20matching%20%5Bjava.lang.Integer%2C%20java.lang.String%2C%20java.lang.Integer%5D%2F</url>
      <content type="text"><![CDATA[如下错误提示：mybatis：No constructor found in xxx matching [java.lang.Integer, java.lang.String, java.lang.Integer]原因：xxx 这个bean缺少一个默认的构造方法！解决：加上默认的构造方法即可我是在单元测试的时候遇到这个问题]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux cal date命令详解]]></title>
      <url>%2F20170314-linux%20cal%20date%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970##显示当月的日历hisen@ubuntu:~$ cal March 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ##指定显示1997年11月当月的日历hisen@ubuntu:~$ cal 11 1997 November 1997 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##显示2018年全年12个月的日历hisen@ubuntu:~$ cal -m 12 -y 2018 2018 January February March Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 1 2 3 1 2 3 7 8 9 10 11 12 13 4 5 6 7 8 9 10 4 5 6 7 8 9 10 14 15 16 17 18 19 20 11 12 13 14 15 16 17 11 12 13 14 15 16 17 21 22 23 24 25 26 27 18 19 20 21 22 23 24 18 19 20 21 22 23 24 28 29 30 31 25 26 27 28 25 26 27 28 29 30 31 April May June Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 1 2 3 4 5 1 2 8 9 10 11 12 13 14 6 7 8 9 10 11 12 3 4 5 6 7 8 9 15 16 17 18 19 20 21 13 14 15 16 17 18 19 10 11 12 13 14 15 16 22 23 24 25 26 27 28 20 21 22 23 24 25 26 17 18 19 20 21 22 23 29 30 27 28 29 30 31 24 25 26 27 28 29 30 July August September Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 1 2 3 4 1 8 9 10 11 12 13 14 5 6 7 8 9 10 11 2 3 4 5 6 7 8 15 16 17 18 19 20 21 12 13 14 15 16 17 18 9 10 11 12 13 14 15 22 23 24 25 26 27 28 19 20 21 22 23 24 25 16 17 18 19 20 21 22 29 30 31 26 27 28 29 30 31 23 24 25 26 27 28 29 30 October November December Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 1 2 3 1 7 8 9 10 11 12 13 4 5 6 7 8 9 10 2 3 4 5 6 7 8 14 15 16 17 18 19 20 11 12 13 14 15 16 17 9 10 11 12 13 14 15 21 22 23 24 25 26 27 18 19 20 21 22 23 24 16 17 18 19 20 21 22 28 29 30 31 25 26 27 28 29 30 23 24 25 26 27 28 29 30 31 ##输出当前日期hisen@ubuntu:~$ dateTue Mar 14 11:48:14 CST 2017##格式化输出年月日hisen@ubuntu:~$ date &quot;+%Y-%m-%d&quot;2017-03-14##格式化输出当前时间hisen@ubuntu:~$ date &quot;+%H:%M:%S&quot;11:49:10##格式化输出年月日时间hisen@ubuntu:~$ date &quot;+%Y-%m-%d %H:%M:%S&quot; 2017-03-14 11:49:18]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[1103 host 'xxx' is not allowed to connect to this mysql]]></title>
      <url>%2F20170311-1103%20host%20%E2%80%98xxx%E2%80%99%20is%20not%20allowed%20to%20connect%20to%20this%20mysql%2F</url>
      <content type="text"><![CDATA[出现原因：这是由于mysql服务端root用户所对应的客户端权限设置问题。默认所对应的客户端地址只有localhost（也就是服务端的机器），我们目的是任何地址都可以用root访问mysql服务端。解决办法：123456789101112$ mysql -u root -p#进入mysql交互界面mysql&gt; use mysql;#使用mysql这个库mysql&gt; grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;hisen&apos;; #让root可以在任何ip登陆，密码为：hisenmysql&gt; flush privileges; #刷新mysql&gt; exit;#退出$ service mysql restart#重启mysql]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu虚拟机安装MySQL并且开启root远程访问]]></title>
      <url>%2F20170311-Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E4%B8%94%E5%BC%80%E5%90%AFroot%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%2F</url>
      <content type="text"><![CDATA[安装mysql很简单，关键是开启这个远程很坑！！！一、安装1.安装1sudo apt-get install mysql-server等待完成即可，过程中需要设置密码2.查看是否成功1sudo netstat -tap | grep mysql3.登陆mysql1mysql -u root -p这条命令回车之后需要输入mysql密码二、开启远程访问12345678910$ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf#找到bind-address=127.0.0.1直接注释$ mysql -u root -p -h#登陆mysqlmysql&gt; use mysql;#使用mysql这个库mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;hisen&quot;;#把root用户改成可以在任何ip上登陆，并且密码为：hisenmysql&gt; flush privileges;#刷新重启：service mysql restart接下来就可以在navicat里面连接了三、注意事项因为在网上找的很多教程，都是说改这个配置文件：这个是错误的1/etc/mysql/my.cf如果是通过apt-get方式安装的，默认的是第二步那个配置文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mybatis常用jdbctype]]></title>
      <url>%2F20170310-mybatis%E5%B8%B8%E7%94%A8jdbctype%2F</url>
      <content type="text"><![CDATA[Mybatis中javaType和jdbcType对应关系JDBC TypeJava TypeCHARStringVARCHARStringLONGVARCHARStringNUMERICjava.math.BigDecimalDECIMALjava.math.BigDecimalBITbooleanBOOLEANbooleanTINYINTbyteSMALLINTshortINTEGERintBIGINTlongREALfloatFLOATdoubleDOUBLEdoubleBINARYbyte[]VARBINARYbyte[]LONGVARBINARYbyte[]DATEjava.sql.DateTIMEjava.sql.TimeTIMESTAMPjava.sql.TimestampCLOBClobBLOBBlobARRAYArrayDISTINCTmapping of underlying typeSTRUCTStructREFRefDATALINKjava.net.URL]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SQL优化之小细节 - 点滴记录]]></title>
      <url>%2F20170309-SQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B0%8F%E7%BB%86%E8%8A%82%20-%20%E7%82%B9%E6%BB%B4%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[不知道现在是不是还很多人首先就把关联的id放在where的第一位这里有一个简单的对比，情况相同的时候，两个sql的时间相差八倍优：0.077s123456789SELECT ew.all_amt , ew.customer_id, cf.id, cf.cert_id, cf.acct_typeFROM ew_quota_info ew, cf_customer cfWHERE cf.acct_type in(2,3) AND ew.customer_id = cf.id劣：0.630s123456789SELECT ew.all_amt , ew.customer_id, cf.id, cf.cert_id, cf.acct_typeFROM ew_quota_info ew, cf_customer cfWHERE ew.customer_id = cf.id AND cf.acct_type in(2,3)上述原因：where子句从后往前执行，应该把大的过滤条件放在后面记录时间：2017年3月9日 10:44:59]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu重装系统 - 在ubuntu系统下重新安装]]></title>
      <url>%2F20170305-ubuntu%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%20-%20%E5%9C%A8ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[有时候在linux环境下需要重新安装一下系统这里我就说一下今天我安装的方法。下载好ubuntu的镜像，随便放在一个非系统盘的根目录下改名为：ubuntu.iso1234567891011sudo chmod 777 /boot/grub/grub.cfgsudo vi /boot/grub/grub.cfg#在 export linux_gfx_mode 下面添加如下内容menuentry &quot;install ubuntu powered by hisen&quot; &#123; search --set -f /ubuntu.iso loopback loop /ubuntu.iso set root=(loop) linux /casper/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu.iso initrd /casper/initrd.lz boot&#125;保存退出，重启就会进入系统。桌面上点击那个安装的图标即可完成重装]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu 16 安装IDEA 并且设置快捷启动]]></title>
      <url>%2F20170304-Ubuntu%2016%20%E5%AE%89%E8%A3%85IDEA%20%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[安装简单，下载官网的文件(with java的比较方便)解压之后在bin目录下执行1sudo sh idea.sh就会进入安装程序，接下来会跳出图形界面，跟windows差不多的步骤没有激活码可以看之前的文章关键的一个是我发现网上说的建立桌面快捷方式不行就这样弄个方便的123456cd ~ln -s /idea home/bin/idea.sh idea#接下来执行 idea &amp; 就可以打开，如果提示权限不够#就执行 sudo idea &amp;sudo idea &amp;#后面的 &amp; 代表后台运行的意思，不影响控制台]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[idea jrebel 7.0 破解 - 获取JRebel激活码]]></title>
      <url>%2F20170303-idea%20jrebel%207.0%20%E7%A0%B4%E8%A7%A3%20-%20%E8%8E%B7%E5%8F%96JRebel%E6%BF%80%E6%B4%BB%E7%A0%81%2F</url>
      <content type="text"><![CDATA[其实这玩意完全不要破解，直接官网注册就会给一个注册码注册地址：https://zeroturnaround.com注册完了之后在IDEA里面去设置，会提醒激活。tomcat部署了项目之后，点击JR启动是可以热部署的！！！改了java代码都不要重新启动项目，哈哈！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA failed to create jvm:error code -1]]></title>
      <url>%2F20170303-idea%20failed%20to%20create%20jvm%20error%20code%20-1%2F</url>
      <content type="text"><![CDATA[今天先更改了 idea64.exe.vmoptions 这个配置文件一直么有重启，后来就安装了个插件重启一下，结果就泪崩了一直出现这个错误总以为是环境变量配置的问题，或者是文件损坏了什么重启，重装jdk，重新配置什么都试过，不管用。后来替换了配置文件就好了！！！解决方案配置文件路径：123\IDEA HOME\bin\idea64.exe.vmoptions或者\IDEA HOME\bin\idea.exe.vmoptions默认配置文件内容如下：32bit1234567891011-server-Xms128m-Xmx512m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow64bit12345678910-Xms128m-Xmx750m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrowby the way:IDEA 写博客真是舒服啊~完全不用切换来切换去的！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[count函数效率问题 - 了解count函数]]></title>
      <url>%2F20170303-count%E5%87%BD%E6%95%B0%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%20-%20%E4%BA%86%E8%A7%A3count%E5%87%BD%E6%95%B0%2F</url>
      <content type="text"><![CDATA[count函数的作用想要真正的理解count函数，我们就必须明白count函数的作用。作用一：统计某一列非空(not null)值得数量，即统计某列有值得结果数,使用count(col)。作用二：统计结果集的行数，此时不用管某列是否为null值。即使用count(*).明白了这点，我们就应该知道MySQL的count(*)并不是想象中的那样，统计每一列的值，而是直接忽视掉所有列，直接统计行数，那么它的效率肯定是很高的。但是有一点，当col指定了该字段为NOT NULL时实际上，MySQL会自动将count(col)转为count(*),但是这样也同样耗费了些时间，如果col没有指定为NOT NULL的话，那么效率就更低了，MySQL就必须要判断每一行的值是否为空。所以综上所述，如果是要统计行数最好优先使用select count(*)当统计某一列等于多少的值得时候可以使用下面两种方法:12SELECT SUM(IF(id = 23,1,0)) FROM table SELECT COUNT(id = 23 OR NULL) FROM table]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用IDEA写Hexo博客的一些技巧]]></title>
      <url>%2F20170303-%E5%88%A9%E7%94%A8IDEA%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[今天偶然看到有人说用idea写博客刚开始我觉得这样会很麻烦，后来想想以前写博客也是醉了先新建一个 _post 的快捷方式进去，然后到博客根目录打开Git Bash，然后执行1hexo n &quot;你要写的文章题目&quot;然后在 _post 快捷方式打开刚刚新建的markdown文件，用markdownpad打开编辑。。。编辑完了回到Git Bash。。。。想想就很麻烦于是乎用IDEA打开博客根目录1sources -&gt; _post -&gt; new -&gt; Edit File Templatesname：markdown extension：md内容：1234567---title: $&#123;NAME&#125;keywords: []date: $&#123;DATE&#125; $&#123;TIME&#125;tags: []categories:---接下来apply -&gt; *.md -&gt; 下面选择markdown以后新建markdown文件就会默认带上这个模版效果12345title: 利用IDEA写Hexo博客的一些技巧keywords: []date: 2017/3/3 10:51tags: []categories: hexo接下来到了发布的时间，于是我们可以设置一下Terminal（在setting里面），设置为bash（git目录下）设置完了之后Alt + F12 调出 Terminal 即可进行git操作到此，大功告成，我要去更新博客了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA 貌似注解失效 - 报错：cannot resolve method xxx]]></title>
      <url>%2F20170301-IDEA-%E8%B2%8C%E4%BC%BC%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88-%E6%8A%A5%E9%94%99%EF%BC%9Acannot-resolve-method-xxx%2F</url>
      <content type="text"><![CDATA[在java平台上lombok提供了简单的注解的形式来帮助我们消除一些必须有但看起来很臃肿的代码比如属性的get/set，及对象的toString等方法，特别是相对于 POJO;出现问题各种log方法，set方法中红色波浪线提示：cannot resolve method xxx虽然出现错误但是编译是可以通过的问题原因原来的代码用了lombok简单注解比如maven的pom.xml文件有如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.8&lt;/version&gt;&lt;/dependency&gt;解决办法安装lombok plugin装完插件之后就舒服了，也不报错]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA Denpendencies红色波浪线报错,所有的包无法导入 - 一种解决办法]]></title>
      <url>%2F20170228-IDEA-Denpendencies%E7%BA%A2%E8%89%B2%E6%B3%A2%E6%B5%AA%E7%BA%BF%E6%8A%A5%E9%94%99-%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5-%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
      <content type="text"><![CDATA[1failed to read artifact descriptor for xxx：jar一下午那代码里面是各种报错凡是引入的大部分都报错原因就是maven管理的jar没有添加上依赖最后在stackoverflow找到了良药上面有图片，错误会详细一点，如果你的也相同，可以试一试1maven project -&gt; Execute Maven Goal -&gt; mvn -U clean install执行以上命令之后等待完成，应该就好了参考自stackoverflow：点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何学习NIO - NIO简单的例子]]></title>
      <url>%2F20170227-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0NIO-NIO%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90%2F</url>
      <content type="text"><![CDATA[这里参照一些例子写了个简单的CS模型例子代码：NIO应用之简单的CS模型可以用来简单的理解一下java nio深入的理解可以看看下面的链接。Java NIO 系列教程:点击查看如何学习Java的NIO？:点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java.lang.IllegalArgumentException: addChild: Child name '/hisen' is not unique]]></title>
      <url>%2F20170227-java-lang-IllegalArgumentException-addChild-Child-name-hisen-is-not-unique%2F</url>
      <content type="text"><![CDATA[报错如下：12345678910111213141516171819202122232425262728293031323334353637383940414227-Feb-2017 12:53:31.268 严重 [RMI TCP Connection(13)-127.0.0.1] org.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method manageApp java.lang.IllegalArgumentException: addChild: Child name &apos;/hisen&apos; is not unique at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:738) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734) at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1702) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:482) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:431) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487) at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1420) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) at sun.rmi.transport.Transport$1.run(Transport.java:177) at sun.rmi.transport.Transport$1.run(Transport.java:174) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:173) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)重要的是：12org.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method manageApp java.lang.IllegalArgumentException: addChild: Child name &apos;/hisen&apos; is not uniqueIDEA解决办法Project Structure -&gt; Artifacts查看里面是否有配置相同的Artifacts删除即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[查看linux进程 - 多重方式]]></title>
      <url>%2F20170227-%E6%9F%A5%E7%9C%8Blinux%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E9%87%8D%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[可以使用ps命令。它能显示当前运行中进程的相关信息，包括进程的PID。Linux和UNIX都支持ps命令，显示所有运行中进程的相关信息。ps命令能提供一份当前进程的快照。如果想状态可以自动刷新，可以使用top命令。ps命令输入下面的ps命令，显示所有运行中的进程：1ps aux | less这个命令按 q 退出后面加了“| less”就会分页显示，如果去掉会一次性显示出所有结果输出：123456789101112131415161718192021222324252627282930313233hisen@hisen-server:~$ ps aux | lessUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.2 0.5 37956 6028 ? Ss 09:03 0:02 /sbin/initroot 2 0.0 0.0 0 0 ? S 09:03 0:00 [kthreadd]root 3 0.0 0.0 0 0 ? S 09:03 0:00 [ksoftirqd/0]root 4 0.0 0.0 0 0 ? S 09:03 0:00 [kworker/0:0]root 5 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [kworker/0:0H]root 6 0.0 0.0 0 0 ? S 09:03 0:00 [kworker/u2:0]root 7 0.0 0.0 0 0 ? S 09:03 0:00 [rcu_sched]root 8 0.0 0.0 0 0 ? S 09:03 0:00 [rcu_bh]root 9 0.0 0.0 0 0 ? S 09:03 0:00 [migration/0]root 10 0.0 0.0 0 0 ? S 09:03 0:00 [watchdog/0]root 11 0.0 0.0 0 0 ? S 09:03 0:00 [kdevtmpfs]root 12 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [netns]root 13 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [perf]root 14 0.0 0.0 0 0 ? S 09:03 0:00 [khungtaskd]root 15 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [writeback]root 16 0.0 0.0 0 0 ? SN 09:03 0:00 [ksmd]root 17 0.0 0.0 0 0 ? SN 09:03 0:00 [khugepaged]root 18 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [crypto]root 19 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [kintegrityd]root 20 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [bioset]root 21 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [kblockd]root 22 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [ata_sff]root 23 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [md]root 24 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [devfreq_wq]root 25 0.0 0.0 0 0 ? S 09:03 0:00 [kworker/u2:1]root 26 0.0 0.0 0 0 ? S 09:03 0:00 [kworker/0:1]root 28 0.0 0.0 0 0 ? S 09:03 0:00 [kswapd0]root 29 0.0 0.0 0 0 ? S&lt; 09:03 0:00 [vmstat]root 30 0.0 0.0 0 0 ? S 09:03 0:00 [fsnotify_mark]root 31 0.0 0.0 0 0 ? S 09:03 0:00 [ecryptfs-kthrea]:查看系统中的每个进程12ps -Aps -e-A：显示所有进程a：显示终端中包括其它用户的所有进程x：显示无控制终端的进程显示进程的树状图1pstree输出123456789101112131415161718192021222324252627hisen@hisen-server:~$ pstreesystemd─┬─accounts-daemon─┬─&#123;gdbus&#125; │ └─&#123;gmain&#125; ├─acpid ├─agetty ├─atd ├─cron ├─dbus-daemon ├─dhclient ├─2*[iscsid] ├─java───14*[&#123;java&#125;] ├─lvmetad ├─lxcfs───2*[&#123;lxcfs&#125;] ├─mdadm ├─polkitd─┬─&#123;gdbus&#125; │ └─&#123;gmain&#125; ├─redis-server───2*[&#123;redis-server&#125;] ├─rsyslogd─┬─&#123;in:imklog&#125; │ ├─&#123;in:imuxsock&#125; │ └─&#123;rs:main Q:Reg&#125; ├─snapd───5*[&#123;snapd&#125;] ├─sshd───sshd───sshd───bash───pstree ├─systemd───(sd-pam) ├─systemd-journal ├─systemd-logind ├─systemd-timesyn───&#123;sd-resolve&#125; └─systemd-udevd]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java开发的一点思考]]></title>
      <url>%2F20170226-Java%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83%2F</url>
      <content type="text"><![CDATA[目前的形式来说java后台市场还是挺大，虽然也有很多python和php的系统。要想从事企业级的项目开发，你必须掌握如下要点：掌握项目开发的基本步骤具备极强的面向对象的分析与设计技巧掌握用例驱动、以架构为核心的主流开发方法没有人愿意自己一辈子就满足于掌握了一些代码实现的技巧，别人告诉你要实现什么，你就用代码堆砌来实现别人的要求！你必须学会从整个项目的角度去思考！你必须学会假如你是项目经理，你该如何思考！你必须学会假如你是架构师，你该如何思考！你必须掌握针对某个特定问题领域的分析方法！关于基础知识：JavaSE基本语法、数据类型、操作符等：int、long、Integer、Long、if、else、for、while面向对象：class（类）、Object（对象）、instance（实例）、state（状态）、behavior（行为）、field、method、new、可见性（访问控制）、attribute、property、package、import、static variable、class variable、instance variable、heap、method area、stack、GC（垃圾回收）、override、overload、对象转型(casting)、多态、this、super异常处理：理解编译期错误和运行期错误的区别、Exception、RuntimeException、checked exception、unchecked exception、try、catch、finally、throw new XXXException、throws XXXException、异常处理的基本原则数组与集合：数组的定义和使用方法、Collection、List、Set、Map、ArrayList、HashSet、HashMap、Iterator、equals、hashCode、Comparable、Comparator常用类：String、intern、常量池、StringBuffer、java.util.Date、SimpleDateFormat、Regex（正则表达式）反射机制：Class、Method、Field、invoke、newInstance、BeanUtils（apache-commons）、PropertyUtils（apache-commons）输入输出流：InputStream、OutputStream、Reader、Writer、Adapter设计模式与原始流类、Decorator设计模式与包装流类、对象序列化和反序列化多线程：Thread、Runnable、sleep、wait、notify、synchronized、lockServlet和JSPHttpServlet、doGet、doPost、HttpServletRequest、HttpServletResponse、request.getParameter()、request.setAttribute()、request.getAttribute()、request.getSession()、ServletContext、Filter、web.xml、tomcat、forward与redirect、http协议的无状态性、cookie、JSP Scope Object、、HTML与JavaScript:你需要能够理解常见的网页标签、理解在网页中引入JavaScript的方法、以及JavaScript的基本语法与使用方法以上，就是你进一步学习Java所必备的基本知识。特别是一些个专业术语和名词，看到这些名词，如果你像看到亲爹一样亲切，那么说明你对Java的基础知识就很熟悉了,记住，仅仅是熟悉了接下来是SSH对于初学者来说，这三大框架被赋予了太多神秘的色彩，似乎它们是重中之重的知识！但是对于拥有多年Java开发经验的专业技术人员来说，对于那些Java牛人来说，却对这三大框架不太感冒！难道它们不重要吗？现在很多企业都在用这三大框架，所以很多企业也把掌握这三大框架作为招聘的必备条件。不可否认的是，也有很多大型企业没有用这三大框架，这些企业经过多年发展，自身已经有一定的技术积累，也形成了自己独特的技术框架体系。这三大框架既可以说很重要，也可以说不重要。说重要的原因在于：这三大框架对JavaEE开发中所存在的普遍的问题，提供了优美的解决方案，它们蕴含了这个行业中最NB的开发人员的努力和想法，所以，学习这三大框架，你就可以窥探到这些处于技术巅峰的牛人们究竟对一个问题是怎么想的，通过一种什么样的设计思路去解决问题的。所以，对于你来说，你没有太多项目开发的经验，经验是什么？经验就是你知道可能会遇到哪些问题，针对哪个问题可以有哪些解决方法，在某个情景下，哪种解决方法是较好的，哪种方法不太好等等！如果你没做过什么项目，你根本就不会去意识到你可能会遇到哪些问题，而这些问题往往又是非常关键的！解决得不好，会影响到你的程序的稳定性、可扩展性等等！三大框架就给初学者提供了了解你以后可能会遇到哪些问题，以及针对这些问题的解决方案！当你了解了这三大框架为什么是重要的，那么你也就能理解，为什么这三大框架也可以说是不重要的。如果你曾经开发过很多项目，你碰到了各种各样的问题，凭着你的技术功底，逐个击破了这些问题，在这些人眼里，三大框架（是不是还有N个框架？呵呵）都是浮云！你属于哪一种人呢？如果你没有太多项目开发经验，那么三大框架对于你来说就是非常重要的！而且，由此你也知道了该怎么去学这三大框架。对于三大框架的学习而言，着力点在于给你展示问题，并触发你自己主动的思考，我们鼓励你提出自己的想法，也许你的想法很白痴，但那毕竟是你自己的想法，如果你不知道牛人的想法，那你怎么知道自己的想法是很白痴的呢？在这种思想的碰撞过程中，你就会逐渐提高自己！所以，三大框架学完之后，你不应该只是看到一大堆配置文件，你不应该只是看到了一些Action，一些Service，一些映射文件，你不应该只知道session.save/update/delete，你不应该只是知道struts2中有一堆interceptor，你不应该只是看到一堆jar包……如果你只是知道拷贝一堆jar包，定义一系列配置文件之后，SSH三大框架就能够运行起来了，也可以给你干活了，那么，很悲哀的是，你仍然没有掌握三大框架的精粹！请你回答以下问题：Struts2：为什么每次请求都要创建一个Action对象？ModelDriven拦截器的配置中refreshModelBeforeResult解决了什么问题？为什么在web.xml中配置的StrutsPrepareAndExecuteFilter要过滤所有的请求？请你给我谈谈ValueStack？Struts2是如何实现MVC设计模式的？Spring：你为什么要用Spring？请你聊一聊IOC/DI？什么是声明式的事务管理？为什么要使用声明式的事务管理？Spring如何实现声明式的事务管理？把spring和hibernate集成，定义事务管理特性的时候，为何要将除了添加、删除、更新操作之外的方法，即主要执行查询任务的方法定义为read-only？Hibernate：请你谈谈你对ORM映射的理解？很多人说Hibernate不适合大项目，性能有问题，你是如何理解的？Hibernate为什么一定要定义一个数据库标识？为什么Hibernate建议你的实体类实现hashCode和equals方法？谈谈你对Hibernate实体类中的数据库标识与数据库主键之间关系的认识？谈谈你对Hibernate关联映射与数据库外键之间关系的认识？调用session.save()方法，hibernate一定会发出insert语句吗？谈谈你的理解调用session.update()方法，hibernate一定会发出update语句吗？谈谈你的理解请你聊一下以下名词、概念或用法：lazy、lazy=”extra”、inverse、fetch、fetch=”join”、fetch=”subselect”、batch-size配置了lazy=”true”一定会实现懒加载吗？请你谈谈Hibernate中的“N+1”问题请你谈谈Hibernate有哪些最佳实践？以上并非SSH中全部重点的问题，但它们能考察你能否灵活运用SSH框架！如果你能深刻理解这些问题，再配以合适的实战项目训练，你也会逐渐成为牛人！最后是项目开发能力 ##：不管你是学Java还是别的技术，你的根本目的在于给客户创造价值！否则，你下大力气学习的东西，随着技术的进步和更新，很快就会过时！所以，技术的核心在于用技术创造有价值的成果！也就是说，客户需要什么，你就要用技术把客户需要的东西给他造出来！一个公司之所以要用各种福利条件极力挽留你，是因为你能够给公司带来极高的利益！那么，你有什么可以给公司利用的呢？公司最看重你的哪方面的能力呢？做项目需要的能力很多，其中最核心最基础的就是建模能力（现在最主流的就是面向对象建模！）。什么是建模能力呢？我给大家一个面试题：一个保险公司的保险卡管理模块：销售人员领取保险卡信息（保险卡数量、卡号、领取日期），然后直接销售给客户，销售完毕后，将保险卡信息录入保险公司系统内部（销售人员信息、购买人信息、购买的保险卡数量、卡号等），客户登录保险公司网站激活保险卡，需要填写（保险卡卡号、激活密码、被保险人信息、受益人信息）要求就是：如果这个模块交给你来做，你要怎么做？你要解决哪些问题？你可否画个图，给我描述一下你的想法是什么吗？这只是一个面试题而已，因为只有简单几句话，所以我把它放到这里，让大家感受一下所谓建模要解决什么问题。而业务领域的问题实在是太多了！也许一个几十上百页的需求文档才能把某个业务领域的问题描述清楚，而你的职责就是要把它们实现出来！某个公司要开发一个考勤管理系统，要求与现有的人力资源系统对接，你是主要的技术负责人，那么，你要做哪些工作呢？某ERP项目要实现一个排班管理模块，交给你去完成，你如何去完成呢？不要抱怨项目经理给你的信息太少（只有几句话），不要抱怨客户没有描述清楚他们的需求……你的价值就在于理顺所有的问题，用各种手段获得你想要的信息，按照一定的思路汇总，并在特定的时间里逐个解决它！你应该意识到学Java不是一个坦克大战、一个网络飞车、一个CMS、一个DRP、一个OA那么简单，你不要沉迷于那些技术细节（虽然也是有必要的，但不要钻牛角尖），不要满足于实现了CRUD式的项目需求（虽然这是基础中的基础），在你的前方，永远有一个目标在那里，需要你去努力追赶！今后你将面对更加繁杂的需求，你学习项目的唯一目的，就是：学习如何将需求转化为实现，如何对需求进行分析，如何建立概念模型，如何理顺各种概念之间的关系，如何进行设计，如何选择合适的技术来实现你的设计方案，如何对你的实现进行测试，如何解决你所遇到的形形色色的问题（性能、需求变更等）。当你真正到公司里面从事了几年开发之后，你就会同意我的说法！利用Java找工作，需要的就是项目经验，项目经验就是理解项目开发的基本过程，理解项目的分析方法，理解项目的设计思路，理解项目的实现技巧，理解项目的测试方法，理解项目中各种问题的解决方案。码农只是复制粘贴，并不注重原理，说不出所以然，所以做了几年还只能是码农。加油，共勉！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu 16 LTS 安装zookeeper并开机启动]]></title>
      <url>%2F20170224-Ubuntu-16-LTS-%E5%AE%89%E8%A3%85zookeeper%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[一、安装1sudo apt-get install zookeeper默认信息1234#安装路径/usr/share/zookeeper#配置文件/etc/zookeeper/conf/zoo.cfg二、启动服务端1hisen@hisen-server:/usr/share/zookeeper/bin$ sudo sh zkServer.sh如果报错1234567zkServer.sh: 81: /home/xxx/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: &quot;(&quot; unexpected (expecting &quot;fi&quot;)网上找了一圈原因，大概意思就是脚本里面用到的shell版本与系统当前使用的shell版本不兼容，导致异常。查看当前ubuntu系统的shell，默认是使用dash，但是脚本里面是使用的bash，问题就在这里了。解决步骤：修改当前系统的shell版本：dpkg-reconfigure dashTab 移动到NO 回车即可(选择否)三、验证是否成功123hisen@hisen-server:/usr/share/zookeeper/bin$ sudozkCli.sh -server localhost:2181WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0]出现上面的信息说明成功了四、设置开机启动1.创建配置文件1sudo vi /etc/init.d/zookeeper添加以下信息，注意自己的相关路径是否相同，不同修改之12345678910111213141516171819202122232425262728#!/bin/sh#Configurations injected by install_server below....EXEC=/usr/share/zookeeper/bin/zkServer.shZOO_LOG_DIR=&quot;/var/zookeeper&quot;JAVA_HOME=/usr/hisen/soft/jdk8 PATH=$&#123;JAVA_HOME&#125;/bin:$PATH################ SysV Init Information# chkconfig: - 58 74# description: zookeeper is the zookeeper daemon.### BEGIN INIT INFO# Provides: zookeeper# Required-Start: $network $local_fs $remote_fs# Required-Stop: $network $local_fs $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Should-Start: $syslog $named# Should-Stop: $syslog $named# Short-Description: start and stop zookeeper# Description: zookeeper daemon### END INIT INFOcase $1 in start) /usr/share/zookeeper/bin/zkServer.sh start;; stop) /usr/share/zookeeper/bin/zkServer.sh stop;; status) /usr/share/zookeeper/bin/zkServer.sh status;; restart) /usr/share/zookeeper/bin/zkServer.sh restart;; *) echo &quot;require start|stop|status|restart&quot; ;;esac2.授权1sudo chmod +x zookeeper3.安装开机启动管理软件(一般自带)1sudo apt-get install rcconf4.进入管理界面1sudo rcconf↑ ↓ 移动光标，空格键选中zookeeperTab 使光标移动到OK 回车即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu 16 LTS 安装redis - apt-get install redis-server]]></title>
      <url>%2F20170223-Ubuntu-16-LTS-%E5%AE%89%E8%A3%85redis-ape-get-install-redis-server%2F</url>
      <content type="text"><![CDATA[配置文件的路径： /etc/redis/redis.confredis服务路径: /etc/init.d/redis-server默认是开机启动1234567891011121314151617181920212223242526#安装hisen@hisen-server:/$ sudo apt-get install redis-server#打开服务hisen@hisen-server:/$ service redis start==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===Authentication is required to start &apos;redis-server.service&apos;.Authenticating as: hisen,,, (hisen)Password: ==== AUTHENTICATION COMPLETE ===#打开客户端hisen@hisen-server:/$ redis-cli#操作数据库127.0.0.1:6379&gt; set hisen hisen.meOK#获取数据127.0.0.1:6379&gt; get hisen&quot;hisen.me&quot;127.0.0.1:6379&gt; #停止数据库hisen@hisen-server:/$ service redis stop==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===Authentication is required to stop &apos;redis-server.service&apos;.Authenticating as: hisen,,, (hisen)Password: ==== AUTHENTICATION COMPLETE ===hisen@hisen-server:/$]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[BeanCreationException: Error creating bean with name 'xxxService']]></title>
      <url>%2F20170223-BeanCreationException-Error-creating-bean-with-name-xxxService%2F</url>
      <content type="text"><![CDATA[出现的问题：123[platform] ERROR 2017-02-22 17:46:05,756 [RMI TCP Connection(4)-127.0.0.1] org.springframework.web.context.ContextLoader.() | Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;pmTranLimitLiteServiceImpl&apos;: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.msds.zkutil.ZkLockFactory] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@javax.annotation.Resource(mappedName=, shareable=true, description=, name=, type=class java.lang.Object, authenticationType=CONTAINER, lookup=)&#125; at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:306) ~[spring-context-3.2.4.RELEASE.jar:3.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1116) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE]最重要的是这句12org.springframework.beans.factory.BeanCreationException:Error creating bean with name&apos;pmTranLimitLiteServiceImpl&apos;出现的原因：缺少相关的jar包或者依赖建议不要自己配置idea的module和artificts直接在pom.xml文件添加12&lt;artifactId&gt;hisen-project&lt;/artifactId&gt;&lt;!--加在这句话后面--&gt; &lt;packaging&gt;war&lt;/packaging&gt;&lt;!--加上这句话就会自动给你打war包--&gt;其他原因开始不知道什么问题，后来搜索这个服务。发现这跟dubbo有关，于是百度搜索进了官网没想到常见问题里面就有说这个事情12313. 出现org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;xxxService&apos;: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Method must not be null怎么办？通常是classpath下存在spring多个版本的jar包，排除掉不需要的spring包即可。更多dubbo问题：点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA - Java.Lang.OutOfMemoryError: PermGen Space]]></title>
      <url>%2F20170222-Java-Lang-OutOfMemoryError-PermGen-Space%2F</url>
      <content type="text"><![CDATA[Java.Lang.OutOfMemoryError: PermGen SpaceTomcat只分配了非常小的PermGen内存，这里重新设置一下直接在配置tomcat的时候,在VM options填入:1-XX:PermSize=97m -XX:MaxPermSize=256m]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Maven目录下*.lastupdated命令行批量删除]]></title>
      <url>%2F20170220-Maven%E7%9B%AE%E5%BD%95%E4%B8%8B-lastupdated%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%2F</url>
      <content type="text"><![CDATA[windows系统12cd %userprofile%\.m2\repositoryfor /r %i in (*.lastUpdated) do del %i或者新建一个bat文件，批处理。就不用每次都在cmd敲命令了12345678910111213@echo offecho 确认删除maven仓库下*.lastUpdated文件？pause::create by hisenyuan(hisenyuan@gmail.com)::这里写你的仓库路径set REPOSITORY_PATH=C:\hisenwork\soft\mavenecho 正在搜索...for /f &quot;delims=&quot; %%i in (&apos;dir /b /s &quot;%REPOSITORY_PATH%\*lastUpdated*&quot;&apos;) do ( del /s /q %%i)echo 完毕pauselinux系统1find /app/maven/localRepository -name &quot;*.lastUpdated&quot; -exec grep -q &quot;Could not transfer&quot; &#123;&#125; \; -print -exec rm &#123;&#125; \;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA maven项目通过mongo-java-driver折腾一下MongoDB]]></title>
      <url>%2F20170220-IDEA-maven%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87mongo-java-driver%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8BMongoDB%2F</url>
      <content type="text"><![CDATA[这几天折腾ubuntu然后安装了下mongodb通过Oracle VM VirtualBox端口转发，连接了虚拟机的MongoDB1.用idea创建一个maven项目2.在pom.xml中添加mongodb java驱动12345&lt;dependency&gt; &lt;groupId&gt;org.mongodb&lt;/groupId&gt; &lt;artifactId&gt;mongodb-driver&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt;&lt;/dependency&gt;3.参考官方：MongoDB Driver Quick Tour本用例github地址：mongodbTest贴下代码：package com.hisen.jdbc;import com.mongodb.Block;import com.mongodb.MongoClient;import com.mongodb.client.MongoCollection;import com.mongodb.client.MongoCursor;import com.mongodb.client.MongoDatabase;import com.mongodb.client.result.DeleteResult;import com.mongodb.client.result.UpdateResult;import org.bson.Document;import java.util.ArrayList;import java.util.List;import static com.mongodb.client.model.Accumulators.sum;import static com.mongodb.client.model.Aggregates.group;import static com.mongodb.client.model.Filters.*;import static com.mongodb.client.model.Projections.excludeId;import static com.mongodb.client.model.Sorts.descending;import static com.mongodb.client.model.Updates.inc;import static com.mongodb.client.model.Updates.set;import static java.util.Collections.singletonList;/** * Created by hisenyuan on 2017/2/20 at 13:42. */public class QuickTour &#123; public static void main(String[] args) &#123; MongoClient mongoClient = new MongoClient(&quot;localhost&quot;, 27017); MongoDatabase database = mongoClient.getDatabase(&quot;mydb&quot;); //gets the collection test MongoCollection&lt;Document&gt; collection = database.getCollection(&quot;test&quot;); //插入数据 //insert(collection); //插入大量数据 insertMany(collection); //统计条数 count(collection); //打印查询到的第一条数据 print(collection); //打印所有数据 findAll(collection); //按条件查询一条数据 findOneWithFilter(collection); //按条件查询一个Set集合 getSet(collection); //排序，输出第一条 sortDocuments(collection); //获取指定的field projectingFields(collection); aggregations(collection); //更新 update(collection); //删除数据 delete(collection); &#125; /** * 插入单个文档 * @param collection */ public static void insert(MongoCollection&lt;Document&gt; collection) &#123; //create document Document doc = new Document(&quot;name&quot;, &quot;MongoDB&quot;) .append(&quot;type&quot;, &quot;database&quot;) .append(&quot;count&quot;, 1) .append(&quot;info&quot;, new Document(&quot;x&quot;, 203).append(&quot;y&quot;, 102)); //insert the document into the collection collection.insertOne(doc); &#125; /** * 一次性插入多条数据，用ArrayList拼装 * @param collection */ public static void insertMany(MongoCollection&lt;Document&gt; collection) &#123; //Create the documents in a loop List&lt;Document&gt; documents = new ArrayList&lt;Document&gt;(); for (int i = 0; i &lt; 100; i++) &#123; documents.add(new Document(&quot;i&quot;, i)); &#125; collection.insertMany(documents); &#125; /** * 统计集合中的总条数 * @param collection */ public static void count(MongoCollection&lt;Document&gt; collection) &#123; //Count Documents in A Collection System.out.println(&quot;总条数：&quot; + collection.count()); &#125; /** * 打印查询到的第一条数据 * @param collection */ public static void print(MongoCollection&lt;Document&gt; collection) &#123; //prints the first document found in the collection Document myDoc = collection.find().first(); System.out.println(myDoc.toJson()); &#125; /** * 查询集合中所有的数据 * 不推荐使用foreach循环 * @param collection */ public static void findAll(MongoCollection&lt;Document&gt; collection) &#123; System.out.println(&quot;----------------输出所有数据----------------&quot;); MongoCursor&lt;Document&gt; cursor = collection.find().iterator(); try &#123; while (cursor.hasNext()) &#123; System.out.println(cursor.next().toJson()); &#125; &#125; finally &#123; cursor.close(); &#125; &#125; /** * 条件查询单条数据 * @param collection */ public static void findOneWithFilter(MongoCollection&lt;Document&gt; collection) &#123; //Get A Single Document with a Query Filter Document myDoc = collection.find(eq(&quot;i&quot;, 71)).first(); System.out.println(myDoc.toJson()); &#125; /** * 获得一个Set集合的数据 * @param collection */ public static void getSet(MongoCollection&lt;Document&gt; collection) &#123; // now use a range query to get a larger subset Block&lt;Document&gt; printBlock = new Block&lt;Document&gt;() &#123; public void apply(final Document document) &#123; System.out.println(document.toJson()); &#125; &#125;; //i的值大于98的数据 System.out.println(&quot;----------------i大于98的数据----------------&quot;); collection.find(gt(&quot;i&quot;, 98)).forEach(printBlock); //50 - 51 gt:大于 lte:小于等于 System.out.println(&quot;----------------50&lt;i&lt;=51的数据----------------&quot;); collection.find(and(gt(&quot;i&quot;, 50), lte(&quot;i&quot;, 51))).forEach(printBlock); &#125; /** * 排序 * @param collection */ public static void sortDocuments(MongoCollection&lt;Document&gt; collection) &#123; //根据i的值进行排序 Document myDoc = collection.find(exists(&quot;i&quot;)).sort(descending(&quot;i&quot;)).first(); System.out.println(&quot;----------------排序，输出第一条----------------&quot;); System.out.println(myDoc.toJson()); &#125; /** * 获取想要的field(字段) * @param collection */ public static void projectingFields(MongoCollection&lt;Document&gt; collection) &#123; System.out.println(&quot;----------------获取指定field，输出第一条----------------&quot;); //排除ID字段 Document myDoc = collection.find().projection(excludeId()).first(); System.out.println(myDoc.toJson()); &#125; public static void aggregations(MongoCollection&lt;Document&gt; collection) &#123; /* collection.aggregate(asList( match(gt(&quot;i&quot;, 0)), project(Document.parse(&quot;&#123;ITimes10: &#123;$multiply: [&apos;$i&apos;, 10]&#125;&#125;&quot;))) ).forEach(printBlock); */ //求和 Document myDoc = collection.aggregate(singletonList(group(null, sum(&quot;total&quot;, &quot;$i&quot;)))).first(); System.out.println(myDoc.toJson()); &#125; /** * 更新document的方法 * @param collection */ public static void update(MongoCollection&lt;Document&gt; collection) &#123; //更新一个，如果不引入下面这个包，set方法会报错 //import static com.mongodb.client.model.Updates.*; collection.updateOne(eq(&quot;i&quot;, 10), set(&quot;i&quot;, 110)); //更新多个，小于100的都加100 UpdateResult updateResult = collection.updateMany(lt(&quot;i&quot;, 190), inc(&quot;i&quot;, 100)); System.out.println(&quot;----------------更新条数----------------&quot;); System.out.println(updateResult.getModifiedCount()); &#125; /** * 删除数据的方法 * @param collection */ public static void delete(MongoCollection&lt;Document&gt; collection) &#123; collection.deleteOne(eq(&quot;i&quot;, 210)); //gte 大于等于100的都删除 DeleteResult deleteResult = collection.deleteMany(gte(&quot;i&quot;, 100)); System.out.println(&quot;----------------删除条数----------------&quot;); System.out.println(deleteResult.getDeletedCount()); &#125; /* public static void bulk(MongoCollection&lt;Document&gt; collection) &#123; // 2. Ordered bulk operation - order is guarenteed collection.bulkWrite( Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)), new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)), new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)), new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1), new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))), new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)), new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3), new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4)))); // 2. Unordered bulk operation - no guarantee of order of operation collection.bulkWrite( Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)), new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)), new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)), new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1), new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))), new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)), new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3), new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4))), new BulkWriteOptions().ordered(false)); &#125; */&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows10开机bat启动VirtualBox虚拟机并且后台运行]]></title>
      <url>%2F20170220-Windows10%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%2F</url>
      <content type="text"><![CDATA[1.制作启动脚本新建一个start.bat文件，内容如下1234567891011121314@echo offecho 本命令可让us在后台运行echo 启动之后可以关闭本窗口::进入虚拟机目录cd C:\&quot;Program Files&quot;\Oracle\VirtualBox::执行相关命令 同时启动两台虚拟机VBoxManage startvm &quot;us&quot; --type headless::VBoxManage startvm &quot;ubuntu&quot; --type headless::执行完之后按回车退出窗口pause2.设置开机启动把start.bat文件复制到[启动]文件夹里面[启动]文件夹路径1C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp文件管理器地址栏显示大概是这样1Windows &gt; [开始]菜单 &gt; 程序 &gt; 启动放进去之后就可以开机启动了！启动之后Xshell连接即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu16.04使用阿里云镜像安装Mongodb & 配置]]></title>
      <url>%2F20170219-Ubuntu16-04%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85Mongodb-%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[一、使用阿里云镜像安装Mongodb1 &gt; 添加 MongoDB 公共GPG钥匙1sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA3129272 &gt; 创建列表文件这里把官网repo.mongodb.org换成了mirrors.aliyun.com1echo &quot;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list3 &gt; 重新加载本地包数据库1sudo apt-get update4 &gt; 安装MongoDB1sudo apt-get install -y mongodb-org5 &gt; 启动MongoDB1sudo service mongod start6 &gt; 打开MongoDB客户端1sudo mongo7 &gt; 关闭MongoDB1sudo service mongod stop展示一下1234567hisen@hisen-server:~$ sudo service mongod starthisen@hisen-server:~$ mongoMongoDB shell version: 3.2.12connecting to: test&gt; 1 + 12&gt;安装成功MongoDB默认的数据文件和日志文件分别存储在下面的位置数据文件：/var/lib/mongodb日志文件：/var/log/mongodb你可以修改/etc/mongod.conf 文件来改变相应的存储位置。如果你想改变运行MongoDB的用户你必须把 /var/lib/mongodb和 /var/log/mongodb 2个目录的访问权限付给该用户二、配置MongoDB1允许远程访问绑定ip1$ sudo vim /etc/mongod.conf打开配置文件，添加需要增加的不建议采用注释掉 bindIP 的方案，非常容易受到攻击1234# network interfaces net: port: 27017 bindIp: 0.0.0.0接受所有ip重启1$ sudo service mongod restart2.配置防火墙 （不配置也行）Ubuntu16.04 桌面版默认没有安装好 ipTable，用如下命令安装123sudo apt-get updatesudo apt-get upgradesudo apt-get install iptables-persistent安装过程中，弹窗选择YES安装完成后：1sudo iptables -A INPUT -p tcp --dport 27017 -j ACCEPT]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Oracle VM VirtualBox命令行打开虚拟机并且后台运行]]></title>
      <url>%2F20170219-Oracle-VM-VirtualBox%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%2F</url>
      <content type="text"><![CDATA[这几天在折腾Ubuntu虚拟机，想着也就让他做一台服务器罢了没想到安装之后发现一直没法让VirtualBox隐藏到托盘按正常程序走，打开一个虚拟机会出现两个GUI界面：VirtualBox界面虚拟机界面第一个可以在打开虚拟机之后关闭，第二个不能关闭也不能隐藏到托盘痛苦！！！这里给出解决方案：通过cmd命令行启动并且后台运行一、进入VirtualBox安装目录，我这里是1C:\tool\Oracle\VirtualBox&gt;二、列出所有安装的虚拟机1234C:\tool\Oracle\VirtualBox&gt;VBoxManage list vms&quot;centos&quot; &#123;162f777f-e3c4-4717-8b5b-4a4e43a8b552&#125;&quot;debian&quot; &#123;48ebecba-77ec-483d-ab73-bf9ee777e2f6&#125;&quot;ubuntu&quot; &#123;d8050b3a-b04b-4fe9-8a90-16086dac0ae9&#125;前面是NAME，后面是UUID，之后的name用这连个代替都可以三、命令行启动虚拟机123C:\tool\Oracle\VirtualBox&gt;VBoxManage startvm &quot;ubuntu&quot; --type headlessWaiting for VM &quot;ubuntu&quot; to power on...VM &quot;ubuntu&quot; has been successfully started.headless是在后台运行，并且默认开启vrdp服务，可以通过远程桌面工具来访问下面是打开ubuntu之后用Xshell链接的1234567891011121314Connecting to 127.0.0.1:2222...Connection established.To escape to local shell, press &apos;Ctrl+Alt+]&apos;.Welcome to Ubuntu 16.04 LTS (GNU/Linux 4.4.0-62-generic x86_64) * Documentation: https://help.ubuntu.com/362 个可升级软件包。0 个安全更新。Last login: Sat Feb 18 16:25:58 2017 from 10.0.2.2hisen@hisen-VirtualBox:~$ lsdownload 公共的 模板 视频 图片 文档 下载 音乐 桌面四、所有相关的命令下面所有的NAME都可以用二中的name和UUID代替1234567891011121314151617181920212223242526# 列出所有安装的虚拟机VBoxManage list vms# 后台打开，无界面VBoxManage startvm &quot;NAME&quot; --type headless # gui方式启动，跟桌面点击没有区别VBoxManage startvm NAME --type gui# 列出运行中的虚拟机VBoxManage list runningvms# 关闭虚拟机，等价于点击系统关闭按钮，正常关机VBoxManage controlvm NAME acpipowerbutton# 关闭虚拟机，等价于直接关闭电源，非正常关机VBoxManage controlvm NAME poweroff# 暂停虚拟机的运行VBoxManage controlvm NAME pause# 恢复暂停的虚拟机VBoxManage controlvm NAME resume# 保存当前虚拟机的运行状态VBoxManage controlvm NAME savestate]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu 16 LTS 关闭图形界面]]></title>
      <url>%2F20170218-Ubuntu-16-LTS-%E5%85%B3%E9%97%AD%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%2F</url>
      <content type="text"><![CDATA[有两个方法。第一个方法到了图形化界面，打开terminal(终端)执行1sudo init 3就会跳转到命令行界面，并且只有命令行就是一个全屏的terminal。第二个方法在安装ubuntu的时候，有选择是否安装图形化界面的选项，选择不安装，那么系统将不带有图形化界面而默认进入命令行界面。第三个方法http://hisen.me/20170219-Oracle-VM-VirtualBox%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/第四个方法直接安装Ubuntu Server，目前我就是这样不过装了之后还是推荐第三个方法！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[win下ssh连接VirtualBox Ubuntu 16虚拟机]]></title>
      <url>%2F20170218-win%E4%B8%8Bssh%E8%BF%9E%E6%8E%A5VirtualBox-Ubuntu-16%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
      <content type="text"><![CDATA[安装完虚拟机之后想在windows下用xshell链接Ubuntu虚拟机这种配置下，虚拟机能上网，又能跟win连接，感觉很完美VirtualBox的端口转发很不错，可以转发tomcat什么的准备工作1.给Ubuntu安装openssh-server1sudo apt-get install openssh-server2.查看虚拟机ip 我的是：10.0.2.15(看上面那段)123456789101112131415161718hisen@hisen-VirtualBox:/$ ifconfig -aenp0s3 Link encap:以太网 硬件地址 08:00:27:45:f3:35 inet 地址:10.0.2.15 广播:10.0.2.255 掩码:255.255.255.0 inet6 地址: fe80::ed57:82d2:60cb:7f96/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 跃点数:1 接收数据包:169175 错误:0 丢弃:0 过载:0 帧数:0 发送数据包:34436 错误:0 丢弃:0 过载:0 载波:0 碰撞:0 发送队列长度:1000 接收字节:210738565 (210.7 MB) 发送字节:3633455 (3.6 MB)lo Link encap:本地环回 inet 地址:127.0.0.1 掩码:255.0.0.0 inet6 地址: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 跃点数:1 接收数据包:1718 错误:0 丢弃:0 过载:0 帧数:0 发送数据包:1718 错误:0 丢弃:0 过载:0 载波:0 碰撞:0 发送队列长度:1 接收字节:234769 (234.7 KB) 发送字节:234769 (234.7 KB)VirtualBox设置端口转发在VirtualBox启动页面，右键Ubuntu —&gt;设置网络 —&gt; 连接方式 —&gt; 网络地址转换(NAT)高级 —&gt; 端口转发 —&gt; 点击添加按钮名称协议主机IP主机端口子系统IP子系统端口sshTCP127.0.0.1222210.0.2.1522子系统ip写你的虚拟机ip即可xshell链接Ubuntu虚拟机在xshell链接Ubuntu虚拟机的时候ip写上麦的主机ip：127.0.0.1端口写上面的主机端口：2222然后上面配置的端口转发就可以转发到虚拟机上，顺利连接！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu 16 换阿里云源]]></title>
      <url>%2F20170218-Ubuntu-16-%E6%8D%A2%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90%2F</url>
      <content type="text"><![CDATA[sudo vi /etc/apt/sources.list删除里面所有的内容，添加下面的内容sudo apt-get update三步完成之后即可！12345678910deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu安装JDK8 & Tomcat - 简单教程]]></title>
      <url>%2F20170218-Ubuntu%E5%AE%89%E8%A3%85JDK8-Tomcat-%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[在网速搜索很多教程，感觉写的都太难了我去准备工作：下载JDK，并解压(选择适合自己的版本：地址)下载Tomcat，并解压(选择适合自己的版本：地址)目录约定：java路径：/usr/hisen/soft/java/jdk8tomcat路径：/usr/hisen/soft/tomcat/tomcat8说明以上路径都是解压之后的，请解压之后自行重命名文件夹等工作下面开始配置环境变量：1sudo vi /etc/profile底部添加：12345678910#java的环境变量配置export JAVA_HOME=/usr/hisen/soft/java/jdk8export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin#tomcat的环境变量配置export CATALINA_HOME=/usr/hisen/soft/tomcat/tomcat8export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/libexport PATH=$PATH:$CATALINA_HOME/bin让刚刚的配置生效：1source /etc/profile查看java版本1java -version如果还是默认的OpenJDK12345sudo update-alternatives --install /usr/bin/java java /usr/hisen/soft/java/jdk8/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/hisen/soft/java/jdk8/bin/javac 300#选择默认JDK即可sudo update-alternatives --config java进入tomcat的bin目录1sudo vi catalina.sh顶部添加123#让tomcat知道java在哪里JAVA_HOME=/usr/hisen/soft/java/jdk8JRE_HOME=$JAVA_HOME/jre之后进入在tomcat bin目录执行1234567hisen@hisen:/usr/hisen/soft/tomcat/tomcat8/bin$ sudo sh startup.shUsing CATALINA_BASE: /usr/hisen/soft/tomcat/tomcat8Using CATALINA_HOME: /usr/hisen/soft/tomcat/tomcat8Using CATALINA_TMPDIR: /usr/hisen/soft/tomcat/tomcat8/tempUsing JRE_HOME: /usr/hisen/soft/java/jdk8/jreUsing CLASSPATH: /usr/hisen/soft/tomcat/tomcat8/bin/bootstrap.jar:/usr/hisen/soft/tomcat/tomcat8/bin/tomcat-juli.jarTomcat started.这样就启动了tomcat！！！！注意如果没有在 catalina.sh 添加java路径，会报错123hisen@hisen-VirtualBox:/usr/hisen/soft/tomcat/tomcat8/bin$ sudo sh startup.shNeither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos更换yum源为阿里云 - 三步搞定]]></title>
      <url>%2F20170217-centos%E6%9B%B4%E6%8D%A2yum%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91-%E4%B8%89%E9%83%A8%E6%90%9E%E5%AE%9A%2F</url>
      <content type="text"><![CDATA[阿里云是最近新出的一个镜像源。得益于阿里云的高速发展，这么大的需求，肯定会推出自己的镜像源。阿里云Linux安装镜像源地址：http://mirrors.aliyun.com/CentOS系统更换软件安装源第一步：备份你的原镜像文件，以免出错后可以恢复。1、备份mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/（如果无wget命令，底部有具体说明）CentOS 51wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repoCentOS 61wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repoCentOS 71wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo3、之后运行yum makecache生成缓存ps：如果你跟我一样苦逼：1-bash: wget: command not found然后：1yum -y install wget #失败那么你可以直接选择上面对应系统的文件下载链接下载好文件之后改名为CentOS-Base.repo直接放到/etc/yum.repos.d/目录下即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HashMap和Hashtable的区别]]></title>
      <url>%2F20170217-HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[在Java 2以前，一般使用Hashtable来映射键值和元素。为了使用Java集合框架，Java对Hashtable进行了重新设计，但是，为了向后兼容保留了所有的方法。Hashtable实现了Map接口，除了Hashtable具有同步功能之外，它与HashMap的用法是一样的。·在使用时一般是用ArrayList代替Vector，LinkedList代替Stack，HashMap代替HashTable，即使在多线程中需要同步，也是用同步包装类。另外在使用上还有一些小的差异，比如：HashTable的key和value都不允许为null值，而HashMap的key和value则都是允许null值的。这个其实没有好坏之分，只是Sun为了统一Collection的操作特性而改进的。HashTable有一个contains(Object value)方法，功能上与containsValue(Object value)一样，但是在实现上花销更大，现在已不推荐使用。而HashMap只有containsValue(Object value)方法。HashTable使用Enumeration，HashMap使用Iterator。Iterator其实与Enmeration功能上很相似，只是多了删除的功能。用Iterator不过是在名字上变得更为贴切一些。模式的另外一个很重要的功用，就是能够形成一种交流的语言（或者说文化）。有时候，你说Enumeration大家都不明白，说Iterator就都明白了。在实现上两者已有一些差异，这里简单说明一下：12345678910111213141516171819202122232425262728293031323334353637383940public Hashtable(int initialCapacity, float loadFactor) &#123; if (initialCapacity &lt; 0) throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+ initialCapacity); if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(&quot;Illegal Load: &quot;+loadFactor); if (initialCapacity==0) initialCapacity = 1; this.loadFactor = loadFactor; table = new Entry[initialCapacity]; threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1); initHashSeedAsNeeded(initialCapacity); &#125;public Hashtable(int initialCapacity) &#123; this(initialCapacity, 0.75f); &#125;public Hashtable() &#123; this(11, 0.75f); &#125;public HashMap(int initialCapacity, float loadFactor) &#123; if (initialCapacity &lt; 0) throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; + initialCapacity); if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(&quot;Illegal load factor: &quot; + loadFactor); this.loadFactor = loadFactor; threshold = initialCapacity; init(); &#125;public HashMap(int initialCapacity) &#123; this(initialCapacity, DEFAULT_LOAD_FACTOR); &#125;public HashMap() &#123; this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR); &#125;HashTable中构造hash数组时initialCapacity默认大小是11，增加的方式是 old*2+1。HashMap中构造hash数组时initialCapacity默认大小是16，而且一定是2的指数。对于哈希值的使用也有所不同，HashTable直接使用对象的hashCode，代码是这样的：12int hash = key.hashCode();int index = (hash &amp; 0x7FFFFFFF) % tab.length;而HashMap重新计算hash值，而且用与代替求模：123456789101112131415int hash = hash(k);int i = indexFor(hash, table.length); static int hash(Object x) &#123; int h = x.hashCode(); h += ~(h &lt;&lt; 9); h ^= (h &gt;&gt;&gt; 14); h += (h &lt;&lt; 4); h ^= (h &gt;&gt;&gt; 10); return h;&#125;static int indexFor(int h, int length) &#123; return h &amp; (length-1);&#125;仅供参考，内容来源于互联网]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[java编译错误：程序包javax.servlet不存在javax.servlet.*]]></title>
      <url>%2F20170217-java%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85javax-servlet%E4%B8%8D%E5%AD%98%E5%9C%A8javax-servlet%2F</url>
      <content type="text"><![CDATA[之前用myeclipse开发的项目今天导入到IDEA中去，发现编译出问题ava编译错误：程序包javax.servlet不存在javax.servlet.*原因大概是myeclipse中可以选择Java EE项目而idea没有，缺少 servlet-api.jar 这个jar包解决办法：复制tomcat文件夹下lib—&gt;servlet-api.jar 这个jar包添加到IDEA项目中去：粘贴到External Library目录下即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo百度抓取失败解决办法]]></title>
      <url>%2F20170216-hexo%E7%99%BE%E5%BA%A6%E6%8A%93%E5%8F%96%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
      <content type="text"><![CDATA[上一篇帖子说明了一下百度抓取不到的原因是因为github把百度爬虫给屏蔽了这里给出的解决办法是用hexo自动提交插件需要获取一个自动提交的token注册百度站长工具：http://zhanzhang.baidu.com添加你的hexo域名找到网页抓取 - 链接提交 - 下拉选择你的hexo站点数据提交方式 - 自动提交 - 主动推送(实时)推送接口接口调用地址： http://data.zz.baidu.com/urls?site=hisen.me&amp;token=XmxXyESxyz1hANxE复制上面token=后面的内容，那就是你的token安装自动提交插件：npm install hexo-baidu-url-submit –save编辑站点配置文件_config.yml，添加一下内容12345baidu_url_submit: count: 1 ## 提交最新的一个链接 host: www.hui-wang.info ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里加入新的deployer: 原来type前面是没有 - 的但是不这样处理执行hexo g 会报错12345deploy: - type: git repository: yoururl branch: master- type: baidu_url_submitter生成效果如下：1234567891011121314$ hexo gINFO Start processingINFO Generating Baidu urls for last 1 postsINFO Posts urls generated in baidu_urls.txthttp://hisen.me/20170216-hexo百度抓取失败解决办法/INFO Files loaded in 1.31 s$ hexo dINFO Deploy done: gitINFO Deploying: baidu_url_submitterINFO Submitting urlshttp://hisen.me/20170216-hexo百度抓取失败解决办法/&#123;&quot;remain&quot;:1,&quot;success&quot;:1&#125;INFO Deploy done: baidu_url_submitter感谢插件作者：王辉的博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hxeo百度站长工具抓取失败的原因]]></title>
      <url>%2F20170216-Hxeot%E7%99%BE%E5%BA%A6%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E6%8A%93%E5%8F%96%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%2F</url>
      <content type="text"><![CDATA[近期在折腾下hexo博客发现百度搜索网址都搜索不到自己的站点我只把hexo传到github上，然而去百度站长工具提交网址几条后也没有反应我就测试了一下百度站长工具 - 抓取诊断结果是抓取失败:Github把百度的爬虫给干掉了！所以。。。具体内容如下：1234567提交网址： http://hisen.me/20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/抓取网址： http://hisen.me/20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/抓取UA： Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)抓取时间： 2017-02-16 09:48:55网站IP： 151.***.***.133 已反馈，预计几分钟内完成更新下载时长： 0.331秒抓取异常信息： 拒绝访问 查看帮助返回HTTP头：1234567891011121314HTTP/1.1 403 ForbiddenCache-Control: no-cacheContent-Type: text/htmlTransfer-Encoding: chunkedAccept-Ranges: bytesDate: Thu, 16 Feb 2017 01:48:55 GMTVia: 1.1 varnishConnection: closeX-Served-By: cache-itm7421-ITMX-Cache: MISSX-Cache-Hits: 0X-Timer: S1487209735.687949,VS0,VE187Vary: Accept-EncodingX-Fastly-Request-ID: 3e528056d3333113dfb5da5c92a2421fa71f3705]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA修改全局设置，如maven等]]></title>
      <url>%2F20170215-IDEA%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%EF%BC%8C%E5%A6%82maven%E7%AD%89%2F</url>
      <content type="text"><![CDATA[这几天在折腾maven项目我发现居然每次新open一个项目就得配置下maven因为默认的maven配置文件不行，我自定义的文件用的是阿里云的镜像那样快一点，于是很郁闷，决定要搞定他！！！结果这样设置就可以了，全局设置。1File---&gt;Other Setting---&gt;Default Setting接下来的设置就是一样的了，各种设置都可以，只要你想全局生效]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[windows任务栏由底部改到左边，并自动隐藏]]></title>
      <url>%2F20170215-windows%E4%BB%BB%E5%8A%A1%E6%A0%8F%E7%94%B1%E5%BA%95%E9%83%A8%E6%94%B9%E5%88%B0%E5%B7%A6%E8%BE%B9%EF%BC%8C%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%9A%90%E8%97%8F%2F</url>
      <content type="text"><![CDATA[windows默认是在底部的在底部任务栏空白处：右键—设置—任务栏—在桌面模式下自动隐藏任务栏(开)—任务栏在屏幕上的位置(上 | 下 | 左 | 右)这样就设置完毕了，毕竟笔记本太小用idea的时候居然有些界面很难点击OK什么的！！！知乎有专门讨论任务栏放置位置分析，有兴趣的可以看看:Windows 任务栏放在窗口左边和下面哪一种更合理？各有什么利弊？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[idea启动tomcat服务失败 SEVERE [RMI TCP Connection(3)-127.0.0.1]]]></title>
      <url>%2F20170215-idea%E5%90%AF%E5%8A%A8tomcat%E6%9C%8D%E5%8A%A1%E5%A4%B1%E8%B4%A5-SEVERE-RMI-TCP-Connection-3-127-0-0-1%2F</url>
      <content type="text"><![CDATA[工程是从eclipse生成的，用idea开发。重复了一遍以往正常的不能再正常了的导入配置，结果遇到了如下问题：SEVERE [RMI TCP Connection(3)-127.0.0.1]115-Feb-2017 11:05:25.993 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.listenerStart Skipped installing application listeners due to previous error(s)删除导入项目中的web.xml文件因为idea要用的东西自己会自动生成然后就搞定了这个纠结我一天的问题我是百度搜索这个错误：RMI TCP Connection(3)-127.0.0.1得到的答案，感谢10100：查看原文]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[maven环境搭建]]></title>
      <url>%2F20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[一、环境的配置下载maven：http://maven.apache.org/download.cgi解压到相关目录配置环境变量：计算机—系统属性—高级系统设置—环境变量系统变量新建：M2_HOME 变量值：C:\tool\JAVA\apache-maven-3.3.9path中添加：%M2_HOME%\bin; (注意看看前面有没有分号隔开，没有添上)启动cmd，输入mvm -v可以查看版本123456Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)Maven home: C:\tool\JAVA\apache-maven-3.3.9Java version: 1.7.0_51, vendor: Oracle CorporationJava home: C:\hisenwork\Java\jdk1.7.0_51\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 8&quot;, version: &quot;6.2&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;二、自定义设置(优化)1.自定义下载目录，修改配置文件1C:\hisenwork\soft\maven-3.3.9\conf\settings.xmlC:\hisenwork\soft\maven-3.3.9为你解压的maven路径ps：如果不想自己设置，我有现成的settings.xml，直接复制粘贴，覆盖原来的即可现成的settings.xml内容我放在底部搜索：localRepository在注释外添加以下代码，以后下载maven相关文件就会在这123&lt;!--自定义存放目录--&gt; &lt;localRepository&gt;C:\hisenwork\soft\maven&lt;/localRepository&gt;2.自定义镜像(推荐阿里云，速度飞快)搜索：mirrors在里面添加：1234567&lt;!--阿里云--&gt;&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;3.运行命令初始化maven1mvn help:system然后你会看到命令行飞快的移动，在你刚刚设置的目录下会出现很多东西类似于这样123456789101112131415161718192021222324252627$ mvn help:system[INFO] Scanning for projects...Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 1.8 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 15.9 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom (26 KB at 15.5 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom (15 KB at 19.3 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jarDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 30.6 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom (7 KB at 5.5 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom (9 KB at 8.2 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom (30 KB at 7.9 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom (15 KB at 12.8 KB/sec)[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 49.223 s[INFO] Finished at: 2017-02-14T13:09:33+08:00[INFO] Final Memory: 11M/152M[INFO] ------------------------------------------------------------------------三、maven相关命令创建 Maven 项目1mvn archetype:create编译源代码（编译到target文件夹中）1mvn compile编译测试代码1mvn test-compile运行应用程序中的单元测试1mvn test生成项目相关信息的网站1mvn site清除目标目录中的生成结果（把默认target文件夹中的数据清理）1mvn clean项目打包1mvn package将打包好的包安装到本地仓库中，以使其塔项目能够调用1mvn install生成 Eclipse 项目文件1mvn eclipse:eclipse忽略测试文档编译1mvn -Dmaven.test.skip=true部署到私有服务器1cargo:deploy四、settings.xmllt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--author：HiSENwebsite：http://hisen.me--&gt;&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements. See the NOTICE filedistributed with this work for additional informationregarding copyright ownership. The ASF licenses this fileto you under the Apache License, Version 2.0 (the&quot;License&quot;); you may not use this file except in compliancewith the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied. See the License for thespecific language governing permissions and limitationsunder the License.--&gt;&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they&apos;re all using the same Maven | installation). It&apos;s normally provided in | $&#123;maven.home&#125;/conf/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;!--自定义存放目录--&gt; &lt;localRepository&gt;C:\hisenwork\soft\maven &lt;/localRepository&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the &apos;id&apos; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;!--阿里云--&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of &apos;1.4&apos; might activate a profile when the build is executed on a JDK version of &apos;1.4.2_07&apos;. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;profiles&gt; &lt;!-- profile | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as &apos;env-dev&apos;, &apos;env-test&apos;, &apos;env-production&apos;, &apos;user-jdcasey&apos;, &apos;user-brett&apos;, etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id&apos;s for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property &apos;target-env&apos; with a value of &apos;dev&apos;, | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set &apos;target-env&apos; to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt; &lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt;&lt;/settings&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IDEA自定义注释模板(javadoc) - Jindent插件 - 安装&设置]]></title>
      <url>%2F20170214-IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF-javadoc-Jindent%E6%8F%92%E4%BB%B6-%E5%AE%89%E8%A3%85-%E8%AE%BE%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[在线安装File—&gt;Settings—&gt;Plugin—&gt;Browse repositories…搜索框输入：jindentJindent - Source Code Formatter 选中右边 install等待安装完成apply之后会让你重启idea]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IntelliJ IDEA 注册码 20171123到期]]></title>
      <url>%2F20170214-IntelliJ-IDEA-%E6%B3%A8%E5%86%8C%E7%A0%81-20171123%E5%88%B0%E6%9C%9F%2F</url>
      <content type="text"><![CDATA[IntelliJ IDEA 注册码到期时间为2017年11月23日打开的时候选择注册码激活,不用补丁或者破解注册码1BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==也可以自己搭建idea授权服务器，参考点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PLSQL注册码 - 9999/12/31]]></title>
      <url>%2F20170214-PLSQL%E6%B3%A8%E5%86%8C%E7%A0%81-9999-12-31%2F</url>
      <content type="text"><![CDATA[PLSQL注册码过期时间为：9999/12/311234Registration successful01.601769 - unlimited user licenceservice contract：9999/12/31Product Code：14t46t6vydkvsxekkvf3fjnpzy5wbuhphqzserial Number：1601769password：1xs374ca]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Intellij Idea 快捷键汇总&介绍]]></title>
      <url>%2F20170213-Intellij-Idea-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB-%E4%BB%8B%E7%BB%8D%2F</url>
      <content type="text"><![CDATA[最常用快捷键(1~18)Ctrl＋E，可以显示最近编辑的文件列表Shift＋Click可以关闭文件Ctrl＋[或]可以跳到大括号的开头结尾Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方Ctrl＋F12，可以显示当前文件的结构Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择Ctrl＋N，可以快速打开类Ctrl＋Shift＋N，可以快速打开文件Alt＋Q可以看到当前方法的声明Ctrl＋W可以选择单词继而语句继而行继而函数Alt＋F1可以将正在编辑的元素在各个面板中定位Ctrl＋P，可以显示参数信息Ctrl＋Shift＋Insert可以选择剪贴板内容并插入Alt＋Insert可以生成构造器/Getter/Setter等Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量Ctrl＋Alt＋T可以把代码包在一块内，例如try/catchAlt＋Up and Alt＋Down可在方法间快速移动在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”Ctrl＋Shift＋Alt＋N可以快速打开符号Ctrl＋Shift＋Space在很多时候都能够给出Smart提示Alt＋F3可以快速寻找Ctrl＋/和Ctrl＋Shift＋/可以注释代码Ctrl＋Alt＋B可以跳转到抽象方法的实现Ctrl＋O可以选择父类的方法进行重写Ctrl＋Q可以看JavaDocCtrl＋Alt＋Space是类名自动完成快速打开类/文件/符号时，可以使用通配符，也可以使用缩写Live Templates! Ctrl＋JCtrl＋Shift＋F7可以高亮当前元素在当前文件中的使用Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果Ctrl＋Shift＋J可以整合两行Alt＋F8是计算变量值Alt+回车 导入包,自动修正Ctrl+N 查找类Ctrl+Shift+N 查找文件Ctrl+Alt+L 格式化代码Ctrl+Alt+O 优化导入的类和包Alt+Insert 生成代码(如get,set方法,构造函数等)Ctrl+E或者Alt+Shift+C 最近更改的代码Ctrl+R 替换文本Ctrl+F 查找文本Ctrl+Shift+Space 自动补全代码Ctrl+空格 代码提示Ctrl+Alt+Space 类名或接口名提示Ctrl+P 方法参数提示Ctrl+Shift+Alt+N 查找类中的方法或变量Alt+Shift+C 对比最近修改的代码Shift+F6 重构-重命名Ctrl+Shift+先上键Ctrl+X 删除行Ctrl+D 复制行Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/…/ ）Ctrl+J 自动代码Ctrl+E 最近打开的文件Ctrl+H 显示类结构图Ctrl+Q 显示注释文档Alt+F1 查找代码所在位置Alt+1 快速打开或隐藏工程面板Ctrl+Alt+ left/right 返回至上次浏览的位置Alt+ left/right 切换代码视图Alt+ Up/Down 在方法间快速移动定位Ctrl+Shift+Up/Down 代码向上/下移动。F2 或Shift+F2 高亮错误或警告快速定位代码标签输入完成后，按Tab，生成代码。选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。Ctrl+W 选中代码，连续按会有其他效果选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。Ctrl+Up/Down 光标跳转到第一行或最后一行下Ctrl+B 快速打开光标处的类或方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[网关、快捷支付，代收代付，账户托管，二维码扫码支付]]></title>
      <url>%2F20170213-%E7%BD%91%E5%85%B3%E3%80%81%E5%BF%AB%E6%8D%B7%E6%94%AF%E4%BB%98%EF%BC%8C%E4%BB%A3%E6%94%B6%E4%BB%A3%E4%BB%98%EF%BC%8C%E8%B4%A6%E6%88%B7%E6%89%98%E7%AE%A1%EF%BC%8C%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%2F</url>
      <content type="text"><![CDATA[一、网关支付这是在线支付的最普遍形式。大致支付过程：第三方支付公司作为代理（网关），接入一堆银行。用户在网关页面（可以在商户端，也可以第三方支付平台端）选择银行，页面跳转到第三方支付平台，然后重定向到对应的银行，用户在银行电子银行官网，采用网银（个人网银或企业网银）完成支付。网关支付分为：B2C、B2B两类。涉及的概念：网银支付、银行卡支付。我们一般说的网关支付是指在PC上的在线支付，由于国内银行基本上都要求安装对应的安全控件，且需要银行的网银客户端，这也是大家经常抱怨网银不支持MAC/Linux等操作系统、不支持除IE外的浏览器等兼容性问题。在手机端也有类似网关支付的形态，但由于操作过程较为麻烦，体验不好，一般都采用快捷支付等支付形式。二、快捷支付快捷支付一般是指首次需要验证卡要素，生成协议号或者TOKEN,后面支付直接凭协议号扣款。走的交易形式是消费。快捷支付相比于我们原先说的无磁无密支付[MOTO]在限额上有劣势，体验上有优势。一个相当于长期关系，MOTO相当于一次性关系，每次来都要输入卡要素。三、代收代付代收代付业务是我社利用自身的结算便利，接受客户的委托代为办理指定款项的收付事宜的业务。由中介公司或第三方代为收取和支付费用。顾名思义，代收代付是指先付出去，然后再收回来，金额必须相等。比如代办运输业务，如果是收取一定比率的手续费，就改变了性质。代收代付业务分录：代付时，借：其他应收款 贷：银行存款收回时，借：银行存款 贷：其他应收款四、账户托管待完善五、二维码扫码支付微信扫码业务流程说明：商户后台系统根据用户选购的商品生成订单。用户确认支付后调用微信支付【统一下单API】生成预支付交易；微信支付系统收到请求后生成预支付交易单，并返回交易会话的二维码链接code_url。商户后台系统根据返回的code_url生成二维码。用户打开微信“扫一扫”扫描二维码，微信客户端将扫码内容发送到微信支付系统。微信支付系统收到客户端请求，验证链接有效性后发起用户支付，要求用户授权。用户在微信客户端输入密码，确认支付后，微信客户端提交授权。微信支付系统根据用户授权完成支付交易。微信支付系统完成支付交易后给微信客户端返回交易结果，并将交易结果通过短信、微信消息提示用户。微信客户端展示支付交易结果页面。微信支付系统通过发送异步消息通知商户后台系统支付结果。商户后台系统需回复接收情况，通知微信后台系统不再发送该单的支付通知。未收到支付通知的情况，商户后台系统调用【查询订单API】。商户确认订单已支付后给用户发货。日后需要用到这方面的东西，先整理一番系统的学习或者理解之后再来说说深层次的东西。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[阿里巴巴Java开发手册，摘要&下载链接]]></title>
      <url>%2F20170213-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%8C%E6%91%98%E8%A6%81-%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%2F</url>
      <content type="text"><![CDATA[阿里巴巴java开发手册看了几个小时，感觉还是不错都按规范来写，可以避免很多错误下载链接点击下载]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MarkdownPad2注册码 20170213]]></title>
      <url>%2F20170213-MarkdownPad2%E6%B3%A8%E5%86%8C%E7%A0%81-20170213%2F</url>
      <content type="text"><![CDATA[MarkdownPad2注册码亲测有效：2017年2月13日 18:07:25邮箱：1Soar360@live.com授权密钥：1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo提速优化 - 压缩html、css、js by hexo-neat插件]]></title>
      <url>%2F20170211-Hexo%E6%8F%90%E9%80%9F%E4%BC%98%E5%8C%96-%E5%8E%8B%E7%BC%A9html%E3%80%81css%E3%80%81js-by-hexo-neat%E6%8F%92%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[hexo博客生成的HTML代码留有大量的空白通过搜索发现有不错的方法可以解决这个问题那就是安装一个插件！名字叫：hexo-neat安装命令行进入博客根目录，执行以下命令1npm install hexo-neat --save如果使用的是淘宝的cnmp执行以下命令1cnpm install hexo-neat --save配置打开站点配置文件_config.yml，添加以下内容：12345678910111213141516171819#hexo-neat 优化提速插件neat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;安装好之后，就直接正常使用(跟以前没有装的时候一样使用)，重新生成博客就可以发现html源码已经压缩了只是在生成博客的过程中可能要浪费一丁点时间访问速度有所提升！参考：点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java静态代码块]]></title>
      <url>%2F20170211-Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%2F</url>
      <content type="text"><![CDATA[有时候重新回味一下以前的知识也很美妙总能发现以前自己没有怎么在意的细节静态代码块是在类中独立于类成员的static语句块，可以有多个。如果要初始化静态变量，可以声明一个静态块。格式如下：123static &#123; //块执行代码&#125;静态块存在单独的内存中，仅在该类被加载时执行，示例如下：1234567891011121314151617181920212223242526272829303132package com.hisen.javaGaiShu.page91test20;public class JingTaiDaiMaKuai &#123; private static String a; private String b; static &#123; JingTaiDaiMaKuai.a = &quot;我学习了很多语言&quot;; System.out.println(a); JingTaiDaiMaKuai t = new JingTaiDaiMaKuai(); t.fina(); t.b=&quot;Java语言&quot;; System.out.println(t.b); &#125; static &#123; JingTaiDaiMaKuai.a = &quot;I Love Java&quot;; System.out.println(a); &#125; public static void main(String[] args) &#123; &#125; static &#123; JingTaiDaiMaKuai.a = &quot;我还将继续学习下去&quot;; System.out.println(a); &#125; private void fina() &#123; System.out.println(&quot;但是我最喜欢的是：&quot;); &#125;&#125;输出如下：12345我学习了很多语言但是我最喜欢的是：Java语言I Love Java我还将继续学习下去静态代码块在运行main方法时可以直接调用而不用创建实例。静态代码块直接是按顺序执行的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java三种创建对象的方式]]></title>
      <url>%2F20170210-Java%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[有一个实现了Cloneable接口的Person类输出：1234567891011&lt;使用new关键字创建对象&gt;hisen已成年体重为：50年龄为：23&lt;使用newInstance()方法创建对象&gt;体重为：0年龄为：0&lt;使用clone()方法创建对象&gt;hisen已成年体重为：50年龄为：23具体实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.hisen.javaGaiShu.page73test5;/** * 三种方式创建对象 * * @author hisenyuan 2017年2月10日 下午10:27:14 */public class Person implements Cloneable &#123; private String name; private int weight; private int age; public Person() &#123; &#125; public Person(String name, int weight, int age) &#123; super(); this.name = name; this.weight = weight; this.age = age; &#125; public void young() &#123; if (age &gt;= 18 &amp;&amp; age &lt;= 100) System.out.println(name + &quot;已成年&quot;); if (age &gt; 0 &amp;&amp; age &lt; 18) System.out.println(name + &quot;未成年&quot;); &#125; @Override public String toString() &#123; return &quot;体重为：&quot; + weight + &quot;\n年龄为：&quot; + age; &#125; public static void main(String[] args) throws Exception &#123; System.out.println(&quot;&lt;使用new关键字创建对象&gt;&quot;); Person p1 = new Person(&quot;hisen&quot;, 50, 23); p1.young(); System.out.println(p1); System.out.println(&quot;&lt;使用newInstance()方法创建对象&gt;&quot;); Class c = Class.forName(&quot;com.hisen.javaGaiShu.page73test5.Person&quot;); Person p2 = (Person) c.newInstance(); p2.young(); System.out.println(p2); System.out.println(&quot;&lt;使用clone()方法创建对象&gt;&quot;); Person p3 = (Person) p1.clone(); p3.young(); System.out.println(p3); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java基本数据类型 - 以及相关内容]]></title>
      <url>%2F20170210-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
      <content type="text"><![CDATA[类型名称关键字占用内存取值范围包装类字节型byte1-128~127Byte短整形short2-32768~32767Short整形int4-2147483648～2147483647Integer长整形long8-9223372036854775808L ~ 9223372036854775807LLong单精度浮点float4-3.4E38～3.4E38(6~7个有效位)Float双精度浮点double8-1.7E308～1.7E308(15个有效值)Double字符型char2ISO单一字符集，其表示范围是0～65535Charater布尔型boolean1true 或 falseBoolean所有基本数据类型的大小(所占用的字节数)都是明确规定好的，在各种平台上都保持不变，这一特性有助于提高Java程序的可移植性。引用数据类型包括字符串、数组、类和接口。引用数据类型是用户自定义、用来限制其他数据类型。引用数据类型的变量在内存中存储的是数据的引用，并不是数据本身，引用类型是使用间接方法去获取数据java中int为什么占用4个字节？回答1：现在流行的编译器，都是规定的int是四个字节～像tc这样老版的编译器，int才是两个字节，然后也是一样，由于一个字节占八位，最高为符号位，又人为规定，1000000000000000……这个补码编码为-2^31所以，范围就是-2^31~2^31-1回答2：JAVA是采用Unicode编码。每一个字节占8位。你电脑系统应该是32位系统(工具)，这样每个int就是 4个字节其中一个字节由8个二进制位组成回答3：int常见为4个字节，跟操作系统有关系。turbo c（以及Turbo c的一些衍生编译器，他们用的一套编译程序）是dos时代的编译器，是上世纪80年代的产物，严重过时，属于老掉牙的产品，他们编译出来的程序是16位操作系统dos下的程序，所以长度为16位，即两个字节。windows为了兼容dos，所以turbo c生成的文件也可以在windows中运行。其他一般就都是4个字节了。操作系统16位的时候，int 2字节，操作系统32位的时候，int 4字节，由于32位系统之前占主流地位，实际现在就算是64位系统，出于兼容性考虑，int也是4字节的]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[windows10 专业版激活密钥]]></title>
      <url>%2F20170210-windows10-%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5%2F</url>
      <content type="text"><![CDATA[2017年2月10日 16:03:48亲测可用，这比激活工具方便多了1234567891011VK7JG-NPHTM-C97JM-9MPGT-3V66TNPPR9-FWDCX-D2C8J-H872K-2YT43W269N-WFGWX-YVC9B-4J6C9-T83GXNYW94-47Q7H-7X9TT-W7TXD-JTYPMNJ4MX-VQQ7Q-FP3DB-VDGHX-7XM87MH37W-N47XK-V7XM9-C7227-GCQG9]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[20170209面试记录]]></title>
      <url>%2F20170210-20170209%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[上午那家公司约的是十一点面试做完面试题等了好久技术负责人才来这点差评，整个的题目感觉简单，技术负责人前后端好像分的不是很清楚下午这家公司感觉面试官技术不错一、多线程中用哪些集合类？12345多线程中使用集合类主要是考虑线程安全线程安全的集合类有Vector属于线程安全级别的，但是大多数情况下不使用Vector，因为线程安全需要更大的系统开销Hashtable 中的方法是同步的StringBuilder和StringBuffer的方法是一模一样，StringBuilder是线程安全的二、socket编程步骤？12345678910111213141516171819202122客户端:1.用服务器的IP地址和端口号实例化Socket对象。2.调用connect方法，连接到服务器上。3.将发送到服务器的IO流填充到IO对象里，比如BufferedReader/PrintWriter。4.利用Socket提供的getInputStream和getOutputStream方法，通过IO流对象，向服务器发送数据流。5. 通讯完成后，关闭打开的IO对象和Socket。6. 服务器：1. 在服务器，用一个端口来实例化一个 ServerSocket对象。此时，服务器就可以这个端口时刻监听从客户端发来的连接请求。2.调用ServerSocket的accept方法，开始监听连接从端口上发来的连接请求。 3.利用accept方法返回的客户端的Socket对象，进行读写IO的操作通讯完成后，关闭打开的流和Socket对象。三、JDBC有哪几步？防注入是哪个类？使用PreparedStatement防止SQL注入JDBC包含7个步骤：1.加载JDBC驱动程序在连接数据库之前，首先要加载想要连接的数据库的驱动到JVM（Java虚拟机），这通过java.lang.Class类的静态方法forName(String className)实现。例如：1234567try &#123; // 加载MySql的驱动类 Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#125; catch (ClassNotFoundException e) &#123; System.out.println(&quot;找不到驱动程序类 ，加载驱动失败！&quot;); e.printStackTrace();&#125;成功加载后，会将Driver类的实例注册到DriverManager类中。2.提供JDBC连接的URL连接URL定义了连接数据库时的协议、子协议、数据源标识书写形式：协议：子协议：数据源标识协议：在JDBC中总是以jdbc开始子协议：是桥连接的驱动程序或是数据库管理系统名称。数据源标识：标记找到数据库来源的地址与连接端口。例如：（MySql的连接URL）1jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk;useUnicode=true：表示使用Unicode字符集如果characterEncoding设置为gb2312或GBK，本参数必须设置为truecharacterEncoding=gbk：字符编码方式。3.创建数据库的连接要连接数据库，需要向java.sql.DriverManager请求并获得Connection对象,该对象就代表一个数据库的连接。使用DriverManager的getConnectin(String url , String username , String password )方法传入指定的欲连接的数据库的路径、数据库的用户名和密码来获得。例如：1234567891011// 连接MySql数据库，用户名和密码都是rootString url = &quot;jdbc:mysql://localhost:3306/test&quot;;String username = &quot;root&quot;;String password = &quot;root&quot;;try &#123; Connection con = DriverManager.getConnection(url, username, password);&#125; catch (SQLException se) &#123; System.out.println(&quot;数据库连接失败！&quot;); se.printStackTrace();&#125;4.创建一个Statement要执行SQL语句，必须获得java.sql.Statement实例，Statement实例分为以下3种类型：1、执行静态SQL语句。通常通过Statement实例实现。2、执行动态SQL语句。通常通过PreparedStatement实例实现。3、执行数据库存储过程。通常通过CallableStatement实例实现。具体的实现方式：123Statement stmt = con.createStatement();PreparedStatement pstmt = con.prepareStatement(sql);CallableStatement cstmt = con.prepareCall(&quot;&#123;CALL demoSp(? , ?)&#125;&quot;);5.执行SQL语句Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdate和execute1、ResultSet executeQuery(String sqlString)：执行查询数据库的SQL语句,返回一个结果集（ResultSet）对象。2、int executeUpdate(String sqlString)：用于执行INSERT、UPDATE或DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的语句。具体实现的代码：123ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM ...&quot;) ;int rows = stmt.executeUpdate(&quot;INSERT INTO ...&quot;) ;boolean flag = stmt.execute(String sql) ;6.处理结果两种情况：1、执行更新返回的是本次操作影响到的记录数。2、执行查询返回的结果是一个ResultSet对象。ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些行中数据的访问。使用结果集（ResultSet）对象的访问方法获取数据：1234while (rs.next()) &#123; String name = rs.getString(&quot;name&quot;); String pass = rs.getString(1); // 此方法比较高效&#125;（列是从左到右编号的，并且从列1开始）7.关闭JDBC对象操作完成以后要把所有使用的JDBC对象全都关闭，以释放JDBC资源，关闭顺序和声明顺序相反：1、关闭记录集2、关闭声明3、关闭连接对象123456789101112131415161718192021222324if (rs != null) &#123; // 关闭记录集 try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;if (stmt != null) &#123; // 关闭声明 try &#123; stmt.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;if (conn != null) &#123; // 关闭连接对象 try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;四、hibernate映射的几种方式？多对一单向映射（User- Group）多对多双向映射（User&lt;- Role）多对多单向映射（User&lt;-Role）一对一主键双向（Person?-&gt; IdCard）一对一主键单向（Person–&gt; IdCard）一对一外键单向（Person–&gt; IdCard）一对一外键双向（Person&lt;–&gt; IdCard）一对多单向（Group–&gt; User）一对多双向（Group&lt;–&gt; User）继承映射（Pig和Bird 继承Animal）–一棵继承树映射成一张表继承映射（Pig和Bird 继承Animal）–每个具体类映射成一张表joined-classs继承映射（Pig和Bird 继承Animal）–每个子类类映射成一张表union-subclasscomponent映射Set,Map,Arrary[],List映射详情：点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo新建文章时候默认带上categories，tags]]></title>
      <url>%2F20170209-hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%97%B6%E5%80%99%E9%BB%98%E8%AE%A4%E5%B8%A6%E4%B8%8Acategories%EF%BC%8Ctags%2F</url>
      <content type="text"><![CDATA[在博客的 scaffolds 文件夹里有个post.md 添加上需要的配置就行这里是创建post的模板。我的默认设置成这样：123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: []categories:---tags: [关键词1,关键词2]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 绑定个人域名简单方法]]></title>
      <url>%2F20170209-Hexo-%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[1.直接注册个域名(随便在哪里)2.添加域名解析记录类型主机记录记录值CNAME@hisen-yuan.github.io主机记录：@ 代表顶级域名，例如hisen.me 如果想要www.hisen.me把@改成www记录值：你的博客原始地址3.在\blog\source下添加CNAME文件，没有后缀名，内容为你的域名，注意不要带http://我的域名解析为 hisen.me 文件内容为 hisen.me等待解析生效即可！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo Landscape主题JS优化，不使用谷歌CDN]]></title>
      <url>%2F20170208-Hexo-Landscape%E4%B8%BB%E9%A2%98JS%E4%BC%98%E5%8C%96%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8CCDN%2F</url>
      <content type="text"><![CDATA[jQuery库的优化修改这个文件：1themes/landscape/layout/_partial/after-footer.ejs将17行左右的1&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;改为1&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;重新生成博客之后就把谷歌的cdn替换成百度的cdn了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[手机平板电脑原样显示html效果 - html知识]]></title>
      <url>%2F20170208-%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91%E5%8E%9F%E6%A0%B7%E6%98%BE%E7%A4%BAhtml%E6%95%88%E6%9E%9C-html%E7%9F%A5%E8%AF%86%2F</url>
      <content type="text"><![CDATA[有时候可能你会发现在电脑上显示300x300大小的东西看起来很正常但是用手机去访问的话，就出现等比例缩小了但是300x300的大小完全不用缩小直接等大不是更好？在head加上这两行代码，可以做到原样输出12&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何检测Linux VPS系统架构是Xen、KVM还是OpenVZ]]></title>
      <url>%2F20170208-%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8BLinux-VPS%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%98%AFXen%E3%80%81KVM%E8%BF%98%E6%98%AFOpenVZ%2F</url>
      <content type="text"><![CDATA[结果123[root]# virt-whatxenxen-hvmCentos123456wget http://people.redhat.com/~rjones/virt-what/files/virt-what-1.12.tar.gztar zxvf virt-what-1.12.tar.gzcd virt-what-1.12/./configuremake &amp;&amp; make installvirt-whatUbuntu/debian12apt-get install virt-whatvirt-what]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[String 和 StringBuilder、StringBuffer的区别]]></title>
      <url>%2F20170208-String-%E5%92%8C-StringBuilder%E3%80%81StringBuffer%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[String和StringBuilder、StringBuffer的区别？答：Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer/StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。简而言之：String：不能被修改StringBuffer：可以随意修改，有synchronized修饰，是线程安全的，效率略低StringBuilder：可以随意修改，无synchronized修饰，不是线程安全的，效率高面试题1：说出程序的输出结果1234567891011classStringEqualTest &#123; publicstaticvoidmain(String[] args) &#123; String s1 = &quot;Programming&quot;; String s2 = new String(&quot;Programming&quot;); String s3 = &quot;Program&quot; + &quot;ming&quot;; System.out.println(s1 == s2);//false System.out.println(s1 == s3);//true System.out.println(s1 == s1.intern());//true &#125;&#125;存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。String的intern()方法就是扩充常量池的一个方法；当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用面试题2什么情况下用+运算符进行字符串连接比调用StringBuffer/StringBuilder对象的append方法连接字符串性能更好？答：如果使用少量的字符串操作，使用 (+运算符)连接字符串；如果频繁的对大量字符串进行操作，则使用1：全局变量或者需要多线程支持则使用StringBuffer；2：局部变量或者单线程不涉及线程安全则使有StringBuilder。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL使用like查找汉字乱码]]></title>
      <url>%2F20170208-MySQL%E4%BD%BF%E7%94%A8like%E6%9F%A5%E6%89%BE%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81%2F</url>
      <content type="text"><![CDATA[第一种解决办法：BINARY在关键字之前加上：BINARY，会使关键字强制转换为二进制字符串1select id form t where chinese like **BINARY** %汉字%第二种解决办法：改关键字类型把关键字的类型改成：BINARY这两种办法都可以解决乱码问题]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[new ImageIcon()无法加载同目录图片]]></title>
      <url>%2F20170208-new-ImageIcon-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%90%8C%E7%9B%AE%E5%BD%95%E5%9B%BE%E7%89%87%2F</url>
      <content type="text"><![CDATA[错误：1new ImageIcon(&quot;1.jpg&quot;)正确：1new ImageIcon(&quot;src/com/hisen/thread/progressbar/1.jpg&quot;)图片路径：1test\src\com\hisen\thread\progressbar\1.jpg所谓的相对路径，是相对于这个工程而言的，而不是当前文件夹而言。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[eclipse无法链接github]]></title>
      <url>%2F20170208-eclipse%E6%97%A0%E6%B3%95%E9%93%BE%E6%8E%A5github%2F</url>
      <content type="text"><![CDATA[浏览器什么的都能打开github.com就是eclipse无法提交到github，每次都是连接超时然后就直接修改host了，目前有效2017年1月14日 18:01:34host位置：1C:\Windows\System32\drivers\etchost文件最后一行加上下面内容即可1192.30.253.112 github.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决：eclipse下*.properties显示Unicode乱码]]></title>
      <url>%2F20170208-%E8%A7%A3%E5%86%B3%EF%BC%9Aeclipse%E4%B8%8B-properties%E6%98%BE%E7%A4%BAUnicode%E4%B9%B1%E7%A0%81%2F</url>
      <content type="text"><![CDATA[eclipse的*.properties文件，默认的编码方式是iso-8859-1Window -&gt; preferences -&gt; general -&gt; Contents Types -&gt; Text(展开)-&gt; Java Aroperties File(点击) -&gt; *.properties(locked)(点击)-&gt; 把iso-8859-1改为 UTF-8 -&gt; Update -&gt; OK然后就可以正常显示中文了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[log4j:WARN No appenders could be found for logger]]></title>
      <url>%2F20170208-log4j-WARN-No-appenders-could-be-found-for-logger%2F</url>
      <content type="text"><![CDATA[解决办法为：在项目的src下面新建file名为log4j.properties文件123456789101112131415161718192021222324###设置log4j.rootLogger = debug,stdout,D,E###输出信息到控制抬log4j.appender.stdout = org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target = System.outlog4j.appender.stdout.layout = org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n###输出DEBUG 级别以上的日志到=E://logs/error.loglog4j.appender.D = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.File = E://logs/log.loglog4j.appender.D.Append = truelog4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%n###输出ERROR 级别以上的日志到=E://logs/error.loglog4j.appender.E = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.File =E://logs/error.log log4j.appender.E.Append = truelog4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%nlog4j详细使用方法:点击查看]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[记录一次面试过程中交流的一些题]]></title>
      <url>%2F20170126-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BA%A4%E6%B5%81%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98%2F</url>
      <content type="text"><![CDATA[以下是面试一家支付类公司的过程当中遇到的面试题主要是交流比较多，不是先笔试直接是把这些问题带入到具体的情景当中去可能这样更能考验出一个人真正的技术水平1，很多文件，读出数字，加1写回，谈谈你的想法2，能继承string类?1不可以，因为String类有final修饰符，而final修饰的类是不能被继承的，实现细节不允许改变。3，能有个包名一样的String类?如果有一样的会调用哪个？4，一个主线程等待其他线程完成，如果其中有线程出错怎么办？12把线程可能会出现的问题处理掉出错了能保证让他重新执行5，Oracle默认端口？1521 6，b继承a，b的对象能强转成a嘛？不能把一个对象强制转换成另外一个对象 7，数据库去重，删除所有重复记录，只留下一条123456DELETEFROM EMP EWHERE E.ROWID &gt; (SELECT MIN(X.ROWID) FROM EMP X WHERE X.EMP_NO = E.EMP_NO);8，try c里面，没打印出错误来，是为什么？121.可能是程序执行是正确的2.可能存在调用，但是调用的方法里面出现了错误，没有抛出或者是运行时错误9，JAVA数据类型简单类型二进制位数封装器类boolean1Booleanbyte8Bytechar16Charactershort16ShortInt32Integerlong64Longfloat32Floatdouble64Doublevoid–Void10，银行金额字段金融数字是BigDecimal类型 11，用什么解析XML，有什么优缺点1234567891011121314151617181920212223242526272829DOM4J(Document Object Model for Java)虽然DOM4J代表了完全独立的开发结果，但最初，它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过DOM4J API和标准DOM接口具有并行访问功能。从2000下半年开始，它就一直处于开发之中。为支持所有这些功能，DOM4J使用接口和抽象基本类方法。DOM4J大量使用了API中的Collections类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然DOM4J付出了更复杂的API的代价，但是它提供了比JDOM大得多的灵活性。在添加灵活性、XPath集成和对大文档处理的目标时，DOM4J的目标与JDOM是一样的：针对Java开发者的易用性和直观操作。它还致力于成为比JDOM更完整的解决方案，实现在本质上处理所有Java/XML问题的目标。在完成该目标时，它比JDOM更少强调防止不正确的应用程序行为。DOM4J是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML，特别值得一提的是连Sun的JAXM也在用DOM4J.【优点】①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。②支持XPath。③有很好的性能。【缺点】①大量使用了接口，API较为复杂。12，阿贾克斯熟悉吗？能发起请求下载文档吗？返回类型有哪些，遇到错误怎么提示用户12不能发起文档下载，返回的类型只有字符型，出错了alert出错误13，jquery选择器123456789101112jQuery 元素选择器jQuery 使用 CSS 选择器来选取 HTML 元素。$(&quot;p&quot;) 选取 &lt;p&gt; 元素。$(&quot;p.intro&quot;) 选取所有 class=&quot;intro&quot; 的 &lt;p&gt; 元素。$(&quot;p#demo&quot;) 选取所有 id=&quot;demo&quot; 的 &lt;p&gt; 元素。jQuery 属性选择器jQuery 使用 XPath 表达式来选择带有给定属性的元素。$(&quot;[href]&quot;) 选取所有带有 href 属性的元素。$(&quot;[href=&apos;#&apos;]&quot;) 选取所有带有 href 值等于 &quot;#&quot; 的元素。$(&quot;[href!=&apos;#&apos;]&quot;) 选取所有带有 href 值不等于 &quot;#&quot; 的元素。$(&quot;[href$=&apos;.jpg&apos;]&quot;) 选取所有 href 值以 &quot;.jpg&quot; 结尾的元素。14，空指针异常，怎么定位错误12定位到出现错误的行数看看附近的各种调用是否存可能出现空指针异常，再慢慢排除]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux常用的几个命令]]></title>
      <url>%2F20170122-linux%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[1、查看日志最后几行1tail -100 /access.log2、进入目录相关12345678910#进入一个目录root@hisenyuan:/# cd /home/wwwlog/#进入当前目录下的www.google.com目录root@hisenyuan:/home/wwwlog# cd ./www.google.com#进入父目录 root@hisenyuan:/home/wwwlog/www.google.com# cd ../#进入linux系统根目录root@hisenyuan:/home/wwwlog# cd /#根目录root@hisenyuan:/#3、看倒数多少行1234#看倒数10行tail -10 /filepath/filename#看行数外加过滤含有指定字符的行tail -10 access.log | grep -v &quot;yourstring&quot;4、过滤特定行，保存结果到新文件1cat /root/old.text | grep -v &quot;yourstring&quot;&gt; /root/new.text]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基本排序算法的时间/空间复杂度表]]></title>
      <url>%2F20170120-%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8%2F</url>
      <content type="text"><![CDATA[排序方法平均情况最好情况最坏情况辅助空间稳定性冒泡排序O(n²)O(nlogn)O(n²)O(1)稳定简单选择O(n²)O(n²)O(n²)O(1)稳定直接插入O(n²)O(n)O(n²)O(1)稳定希尔排序O(nlogn)~O(n²)O(n^1.3)O(n²)O(1)不稳定堆排序O(nlogn)O(nlogn)O(nlogn)O(1)不稳定归并排序O(nlogn)O(nlogn)O(nlogn)O(n)不稳定快速排序O(nlogn)O(nlogn)O(n²)O(nlogn)~O(n)不稳定以上]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Oracle SQL语句优化 - 写出高效SQL]]></title>
      <url>%2F20170120-Oracle-SQL%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96-%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88SQL%2F</url>
      <content type="text"><![CDATA[[1]选择最有效率的表名顺序只在基于规则的优化器中有效,ORACLE的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 driving table)将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表.[2]WHERE子句中的连接顺序ORACLE采用自下而上(从后往前)的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾[3]SELECT子句中避免使用’*’ORACLE在解析的过程中, 会将’*’ 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间.需要什么字段就查询什么字段，永远不要查询出不需要的字段来[4]减少访问数据库的次数ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等；尽量使用缓存技术；[5]设置单次访问合适的检索数据量在SQLPlus , SQLForms和Pro*C中重新设置ARRAYSIZE参数, 可以增加每次数据库访问的检索数据量 ,建议值为200[6]使用DECODE函数来减少处理时间使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表,因为decode函数有短路效应，类似java中短路与，有合适的就会返回而不继续扫描后面的内容[7]整合简单,无关联的数据库访问如果你有几个简单的数据库查询语句,你可以把它们整合到一个查询中(即使它们之间没有关系),原因见[4][8]删除重复记录，最高效的方法因为这里使用的是rowid123456DELETEFROM EMP EWHERE E.ROWID &gt; (SELECT MIN(X.ROWID) FROM EMP X WHERE X.EMP_NO = E.EMP_NO);[9]用TRUNCATE替代DELETE当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. (注: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML)[10]尽量多使用COMMIT只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少:COMMIT所释放的资源:回滚段上用于恢复数据的信息被程序语句获得的锁redo log buffer 中的空间ORACLE为管理上述3种资源中的内部花费[11]用Where子句替换HAVING子句避免使用HAVING子句, HAVING在检索出所有记录后对结果集进行过滤。这个处理需要排序,总计等操作。 如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销. (非oracle中)on、where、having这三个都可以加条件的子句中，on是最先执行，where次之，having最后，因为on是先把不符合条件的记录过滤后才进行统计，它就可以减少中间运算要处理的数据，按理说应该速度是最快的，where也应该比having快点的，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，就剩下where跟having比较了。在这单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，而having就不能，在速度上后者要慢如果要涉及到计算的字段，就表示在没计算之前，这个字段的值是不确定的，根据上篇写的工作流程，where的作用时间是在计算之前就完成的，而having就是在计算后才起作用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，on比where更早起作用。系统首先根据各个表之间的联接条件，把多个表合成一个临时表后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。由此可见，要想过滤条件起到正确的作用，首先要明白这个条件应该在什么时候起作用，然后再决定放在那里[12]减少对表的查询在含有子查询的SQL语句中,要特别注意减少对表的查询。例子：12345678SELECT TAB_NAMEFROM TABLESWHERE (TAB_NAME, DB_VER) = (SELECT TAB_NAME, DB_VER FROM TAB_COLUMNS WHERE VERSION = 604)[13]通过内部函数提高SQL效率复杂的SQL往往牺牲了执行效率。能够掌握上面的运用函数解决问题的方法在实际工作中是非常有意义的。一般把复杂的sql分解再拼起来。[14]使用表的别名(Alias)当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。[15]用EXISTS替代IN、用NOT EXISTS替代NOT IN在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接。在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率。在子查询中,NOT IN子句将执行一个内部的排序和合并。无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历).。为了避免使用NOT IN ,我们可以把它改写成外连接(Outer Joins)或NOT EXISTS.高效：12345SELECT *FROM EMP (基础表)WHERE EMPNO &gt; 0 AND EXISTS (SELECT &apos;X&apos; FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = &apos;MELB&apos;)低效：1234567SELECT *FROM EMP (基础表)WHERE EMPNO &gt; 0 AND DEPTNO IN (SELECT DEPTNO FROM DEPT WHERE LOC = &apos;MELB&apos;)[16]识别’低效执行’的SQL语句虽然目前各种关于SQL优化的图形化工具层出不穷但是写出自己的SQL工具来解决问题始终是一个最好的方法:1234567891011SELECT EXECUTIONS, DISK_READS, BUFFER_GETS, ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio, ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run, SQL_TEXTFROM V$SQLAREAWHERE EXECUTIONS&gt;0 AND BUFFER_GETS &gt; 0 AND (BUFFER_GETS-DISK_READS)/BUFFER_GETS &lt; 0.8ORDER BY 4 DESC;[17]用索引提高效率索引是表的一个概念部分，用来提高检索数据的效率，ORACLE使用了一个复杂的自平衡B-tree结构。通常，通过索引查询数据比全表扫描要快。 当ORACLE找出执行查询和Update语句的最佳路径时， ORACLE优化器将使用索引。同样在联结多个表时使用索引也可以提高效率。另一个使用索引的好处是，它提供了主键(primary key)的唯一性验证。那些LONG或LONG RAW数据类型，你可以索引几乎所有的列。 通常，在大型表中使用索引特别有效。当然，你也会发现，在扫描小表时，使用索引同样能提高效率。虽然使用索引能得到查询效率的提高，但是我们也必须注意到它的代价. 索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时, 索引本身也会被修改。这意味着每条记录的INSERT , DELETE , UPDATE将为此多付出4 , 5 次的磁盘I/O 。 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。定期的重构索引是有必要的。1ALTER INDEX &lt;INDEXNAME&gt; REBUILD &lt;TABLESPACENAME&gt;[18]用EXISTS替换DISTINCT当提交一个包含一对多表信息(比如部门表和雇员表)的查询时，避免在SELECT子句中使用DISTINCT。一般可以考虑用EXIST替换，EXISTS 使查询更为迅速，因为RDBMS核心模块将在子查询的条件一旦满足后，立刻返回结果。低效：12345SELECT DISTINCT DEPT_NO, DEPT_NAMEFROM DEPT D, EMP EWHERE D.DEPT_NO = E.DEPT_NO高效:1234567SELECT DEPT_NO, DEPT_NAMEFROM DEPT DWHERE EXISTS (SELECT &apos;X&apos; FROM EMP E WHERE E.DEPT_NO = D.DEPT_NO);[19]sql语句用大写因为oracle总是先解析sql语句，把小写的字母转换成大写的再执行[20]在java代码中尽量少用连接符“＋”连接字符串一般来说StringBuilder(非线程安全)是一个不错的选择[21]通常避免在索引列上使用NOT我们要避免在索引列上使用NOT，NOT会产生在和在索引列上使用函数相同的影响。当ORACLE”遇到”NOT，他就会停止使用索引转而执行全表扫描。[22]避免在索引列上使用计算WHERE子句中，如果索引列是函数的一部分。优化器将不使用索引而使用全表扫描。举例:低效：1SELECT … FROM DEPT WHERE SAL * 12 &gt; 25000;高效:1SELECT … FROM DEPT WHERE SAL &gt; 25000/12;[23]用&gt;=替代&gt;高效:1SELECT * FROM EMP WHERE DEPTNO &gt;=4低效:1SELECT * FROM EMP WHERE DEPTNO &gt;3两者的区别在于，前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO=3的记录并且向前扫描到第一个DEPT大于3的记录。[24]用UNION替换OR (适用于索引列)通常情况下，用UNION替换WHERE子句中的OR将会起到较好的效果。对索引列使用OR将造成全表扫描。注意，以上规则只针对多个索引列有效。如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低。在下面的例子中， LOC_ID 和REGION上都建有索引。高效:1234567891011SELECT LOC_ID, LOC_DESC, REGIONFROM LOCATIONWHERE LOC_ID = 10UNIONSELECT LOC_ID, LOC_DESC, REGIONFROM LOCATIONWHERE REGION = &apos;&apos;MELBOURNE&apos;&apos;低效:123456SELECT LOC_ID, LOC_DESC, REGIONFROM LOCATIONWHERE LOC_ID = 10 OR REGION = &apos;&apos;MELBOURNE&apos;&apos;如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面[25]用IN来替换OR这是一条简单易记的规则，但是实际的执行效果还须检验，在ORACLE8i下，两者的执行路径似乎是相同的。低效:1SELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30高效：1SELECT… FROM LOCATION WHERE LOC_IN IN (10,20,30);[26]避免在索引列上使用IS NULL和IS NOT NULL避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引。对于单列索引，如果列包含空值，索引中将不存在此记录。对于复合索引，如果每个列都为空，索引中同样不存在此记录。如果至少有一个列不为空，则记录存在于索引中。举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , ORACLE将不接受下一条具有相同A,B值（123,null）的记录(插入)。然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空。 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中，所以WHERE子句中对索引列进行空值比较将使ORACLE停用该索引。低效: (索引失效)1SELECT … FROM DEPARTMENT WHERE DEPT_CODE IS NOT NULL;高效: (索引有效)1SELECT … FROM DEPARTMENT WHERE DEPT_CODE &gt;=0;[27]总是使用索引的第一个列如果索引是建立在多个列上, 只有在它的第一个列(leading column)被where子句引用时,优化器才会选择使用该索引。这也是一条简单而重要的规则，当仅引用索引的第二个列时，优化器使用了全表扫描而忽略了索引[28]用UNION-ALL替换UNION当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序。如果用UNION ALL替代UNION, 这样排序就不是必要了。效率就会因此得到提高。需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录。因此各位还是要从业务需求分析使用UNION ALL的可行性。 UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存。对于这块内存的优化也是相当重要的。下面的SQL可以用来查询排序的消耗量。低效：123456789SELECT ACCT_NUM, BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &apos;31-DEC-95&apos;UNIONSELECT ACCT_NUM, BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &apos;31-DEC-95&apos;高效:12345678SELECT ACCT_NUM, BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &apos;31-DEC-95&apos; UNION ALL SELECT ACCT_NUM, BALANCE_AMT FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = &apos;31-DEC-95&apos;[29]用WHERE替代ORDER BYORDER BY 子句只在两种严格的条件下使用索引ORDER BY中所有的列必须包含在相同的索引中并保持在索引中的排列顺序ORDER BY中所有的列必须定义为非空WHERE子句使用的索引和ORDER BY子句中所使用的索引不能并列例如:表DEPT包含以下列:DEPT_CODE PK NOT NULLDEPT_DESC NOT NULLDEPT_TYPE NULL低效: (索引不被使用)1SELECT DEPT_CODE FROM DEPT ORDER BY DEPT_TYPE高效: (使用索引)1SELECT DEPT_CODE FROM DEPT WHERE DEPT_TYPE &gt; 0[30]避免改变索引列的类型当比较不同数据类型的数据时, ORACLE自动对列进行简单的类型转换假设 EMPNO是一个数值类型的索引列.1SELECT … FROM EMP WHERE EMPNO = &apos;123&apos;实际上,经过ORACLE类型转换, 语句转化为:1SELECT … FROM EMP WHERE EMPNO = TO_NUMBER(&apos;123&apos;)幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变现在,假设EMP_TYPE是一个字符类型的索引列1SELECT … FROM EMP WHERE EMP_TYPE = 123这个语句被ORACLE转换为:1SELECT … FROM EMP WHERETO_NUMBER(EMP_TYPE)=123因为内部发生的类型转换, 这个索引将不会被用到!为了避免ORACLE对你的SQL进行隐式的类型转换, 最好把类型转换用显式表现出来。 注意当字符和数值比较时, ORACLE会优先转换数值类型到字符类型[31]需要当心的WHERE子句某些SELECT 语句中的WHERE子句不使用索引这里有一些例子在下面的例子里,‘!=’ 将不使用索引。记住, 索引只能告诉你什么存在于表中, 而不能告诉你什么不存在于表中‘||’是字符连接函数. 就象其他函数那样, 停用了索引‘+’是数学函数. 就象其他数学函数那样, 停用了索引相同的索引列不能互相比较,这将会启用全表扫描[32]检索数据量超过表中30%,索引失效如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别。 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍![33]避免使用耗费资源的操作带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎执行耗费资源的排序(SORT)功能。DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序。通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用其他方式重写。如果你的数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强。[34]优化GROUP BY提高GROUP BY 语句的效率，可以通过将不需要的记录在GROUP BY 之前过滤掉。下面两个查询返回相同结果但第二个明显就快了许多。低效:123456SELECT JOB, AVG(SAL)FROM EMPGROUP JOBHAVING JOB = &apos;PRESIDENT&apos;OR JOB = &apos;MANAGER&apos;高效:123456SELECT JOB, AVG(SAL)FROM EMPWHERE JOB = &apos;PRESIDENT&apos; OR JOB = &apos;MANAGER&apos;GROUP JOB本文参考其他文章整理而来出处：http://www.cnblogs.com/rootq/archive/2008/11/17/1334727.html不过互联网上这篇文章很多，都没有版权注明。我也不知道原创是谁！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[该Java语句创建了多少个对象？]]></title>
      <url>%2F20170120-%E8%AF%A5Java%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E4%BA%86%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[1String str = new String(&quot;java&quot;);答案：最少一个，最多两个java中有常量池的概念，常量池和类文件相关，其数据存放的区域是在方法区中（方法区是jvm中内存模型的概念）因为当你使用关键字new的时候是一定会生成一个String类的实例，当你使用直接量的方式定义了一个字符串时，假如这个字符串在常量池中，则不会去实例化String，反之则会生成一个String类的实例，并置入常量池]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL一些简单的语句]]></title>
      <url>%2F20170120-MySQL%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%AD%E5%8F%A5%2F</url>
      <content type="text"><![CDATA[emlog_ad字段idstatuspositiontitleweightcontent12345678910111213141516171819202122232425262728293031--找出重复SELECT a.*FROM emlog_ad aWHERE a.id IN (SELECT b.id id FROM emlog_ad b GROUP BY b.title HAVING count(b.id)&gt;1);--删除重复留下id最小的SELECT a.*FROM emlog_ad aWHERE a.id IN (SELECT b.id FROM emlog_ad b GROUP BY b.title HAVING count(b.id)&gt;1) AND a.id NOT IN (SELECT min(c.id) FROM emlog_ad c GROUP BY c.title HAVING count(c.id)&gt;1);--一句sql把所有AA改为BB，CC改为DDUPDATE emlog_ad aSET a.`status`=(CASE WHEN a.`status` = &apos;1&apos; THEN &apos;11&apos; WHEN a.`status`=&apos;2&apos; THEN &apos;22&apos; END);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo安装过程]]></title>
      <url>%2F20170120-hexo%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[准备工作Node.js：点击下载git：点击下载MarkdownPad：点击下载安装好上面三个工具可能会遇到的问题：1、Git Bash执行node -v提示无效 或者 npm install 报 command not found解决办法：在环境变量 - 用户变量中 - 新建用户变量 - 添加nodejs安装路径如：C:\tool\nodejs2、ERROR Deployer not found : github解决办法：配置文件有问题，冒号后面都有一个空格的执行：npm install hexo-deployer-git –save （这命令是为了解决hexo新版本的部署问题）3使用淘宝镜像加快安装速度安装cnpm，使用命令：1npm install cnpm -g --registry=https://registry.npm.taobao.org安装过程打开Git Bash进入nodejs安装目录开始安装hexo，输入下面代码npm install -g hexo#等待安装完成，这个过程可能会快也可能很慢，耐心等待mkdir blog &amp;&amp; cd blog #上面这个代码是创建一个博客存放的目录hexo init#初始化cnpm install #安装依赖包完成之后，本地博客就搭建完成hexo g #生成静态页面hexo s #启动服务器，打开http://localhost:4000 就是本地博客本地博客安装完成，下面介绍发布到github上登陆github，没有就注册点击右上角加号+Create a new repository名字写：yourgithubname.github.io创建完成点击Setting选择一个主题，然后就好了编辑blog文件夹里面的_config.yml配置文件最后面添加1234deploy: type: git repository: http://github.com/yourname/yourname.github.io.git branch: master最后执行hexo g#重新生成静态博客hexo d#将本地静态博客部署到github现在你在浏览器打开：http://yourname.github.io就可以访问你的博客了到此为止就搭建完了一个博客开始写第一篇文章：执行：hexo new “你的文章标题”然后你在blog/source/_posts文件夹下面有文件，用markdownpad打开编辑执行：hexo g#重新生成hexo s#本地查看效果hexo d#上传到github或者不预览，直接一步上传到github：hexo d -g]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Test Java Code]]></title>
      <url>%2F20170120-Test-Java-Code%2F</url>
      <content type="text"><![CDATA[这里我只是贴一段代码测试一下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.hisen.interview;/** * 变量不能被重写 * * @author hisenyuan 2017年1月18日 下午10:33:33 */public class AboutExtends &#123; public static class A &#123; public int a = 0; public void fun() &#123; System.out.println(&quot;A&quot;); &#125; static &#123; System.out.println(&quot;Astatic&quot;); &#125; &#123; System.out.println(&quot;I&apos;m A class&quot;); &#125; &#125; public static class B extends A &#123; public int a = 1; public void fun() &#123; System.out.println(&quot;B&quot;); &#125; static &#123; System.out.println(&quot;Bstatic&quot;); &#125; &#123; System.out.println(&quot;I&apos;m B class&quot;); &#125; &#125; public static void main(String[] args) &#123; // 里面的static块方法，new了就会执行 // new new B()两个都执行，new new A()执行A的 //static代码块在&#123;&#125;代码块后面执行 A classA = new B(); System.out.println(classA.a); classA.fun(); // 输出信息 // Astatic // Bstatic // I&apos;m A class // I&apos;m B class // 1 // B // 多态记忆口诀 // 变量多态看左边 // 方法多态看右边 // 静态多态看左边 &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决：html rendering error - MarkdownPad 2]]></title>
      <url>%2F20170119-%E8%A7%A3%E5%86%B3%EF%BC%9Ahtml-rendering-error-MarkdownPad-2%2F</url>
      <content type="text"><![CDATA[MarkdownPad 2在windows 10上会遇到这个错误官方发布了这个问题的解决办法详见：点击前往 页面中搜索：This view has crashed解决办法windows 10系统 需要下载 一个 awesomium_v1.6.6_sdk_win这是一个 HTML UI ENGINE下载地址：http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe]]></content>
    </entry>

    
  
  
</search>
